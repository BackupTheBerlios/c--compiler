Grammar

    0 $accept: program $end

    1 epsilon: /* empty */

    2 program: decl_st

    3 decl_st: decl
    4        | decl decl_st

    5 decl: struct_decl
    6     | var_decl
    7     | func_decl

    8 struct_decl: _struct ident '{' var_decl_st '}' ';'

    9 var_decl_st: epsilon
   10            | var_decl var_decl_st

   11 var_part_st: var_part
   12            | var_part ',' var_part_all_st

   13 var_part_all_st: var_part_all
   14                | var_part_all ',' var_part_all_st

   15 var_decl: base_type var_part_st ';'
   16         | def_part ';'
   17         | def_part ',' var_part_all_st ';'
   18         | struct_part var_part_all_st ';'

   19 def_part: base_type ident

   20 struct_part: _struct ident

   21 base_type: _char
   22          | _int
   23          | _long
   24          | _long _int
   25          | _float

   26 var_part: var_ident array_part
   27         | var_ident init_part
   28         | var_ident array_part init_part

   29 var_part_all: var_ident
   30             | var_ident array_part
   31             | var_ident init_part
   32             | var_ident array_part init_part

   33 var_ident: ident

   34 dim_st: dim
   35       | dim ',' dim_st

   36 array_part: '[' dim_st ']'

   37 dim: numb_lit

   38 init_part: '=' constant
   39          | '=' complex_constant

   40 constant: unsigned_constant
   41         | '+' int_constant
   42         | '+' float_constant
   43         | '-' int_constant
   44         | '-' float_constant

   45 unsigned_constant: char_constant
   46                  | int_constant
   47                  | float_constant

   48 char_constant: char_lit

   49 int_constant: numb_lit

   50 float_constant: float_lit

   51 complex_constant_opt: ',' constant
   52                     | ',' complex_constant

   53 complex_constant_st: complex_constant_opt
   54                    | complex_constant_opt complex_constant_st

   55 complex_constant: '{' constant complex_constant_st '}'
   56                 | '{' complex_constant_st '}'

   57 func_decl: prototype
   58          | implementation

   59 prototype: ret_type func_ident '(' ')' ';'
   60          | ret_type func_ident '(' par_type_st ')' ';'
   61          | struct_part func_ident '(' ')' ';'
   62          | struct_part func_ident '(' par_type_st ')' ';'
   63          | def_part '(' ')' ';'
   64          | def_part '(' par_type_st ')' ';'

   65 ret_type: _void

   66 func_ident: ident

   67 par_type_st: par_type
   68            | par_type ',' par_type_st

   69 par_type: base_type
   70         | _struct ident

   71 implementation: ret_type func_ident '(' ')' block
   72               | ret_type func_ident '(' par_decl par_decl_st ')' block
   73               | struct_part func_ident '(' ')' block
   74               | struct_part func_ident '(' par_decl par_decl_st ')' block
   75               | def_part '(' ')' block
   76               | def_part '(' par_decl par_decl_st ')' block

   77 par_decl_st: epsilon
   78            | ',' par_decl par_decl_st

   79 par_decl: par_type par_ident

   80 par_ident: ident

   81 block: '{' var_decl_st stm_st '}'

   82 stm_st: epsilon
   83       | stm stm_st

   84 stm: empty
   85    | expr
   86    | break
   87    | return
   88    | if
   89    | switch
   90    | while
   91    | compound

   92 empty: ';'

   93 expr: expression ';'

   94 break: _break ';'

   95 return: _return ';'
   96       | _return expression ';'

   97 if: _if '(' cond ')' stm
   98   | _if '(' cond ')' stm _else stm

   99 cond: expression

  100 switch: _switch '(' cond ')' '{' case case_st '}'

  101 case_st: epsilon
  102        | case case_st

  103 case: case_label ':' stm stm_st

  104 case_label: _case char_constant
  105           | _case int_constant
  106           | _default

  107 while: _while '(' cond ')' stm

  108 compound: '{' var_decl_st stm_st '}'

  109 expression_st: epsilon
  110              | ',' expression expression_st

  111 expression: equality
  112           | variable '=' expression

  113 equality: relation
  114         | equality _gl relation
  115         | equality _ngl relation

  116 relation: shift
  117         | relation '<' shift
  118         | relation '>' shift
  119         | relation _klgl shift
  120         | relation _grgl shift

  121 shift: add_sub
  122      | shift _shl add_sub
  123      | shift _shr add_sub

  124 add_sub: mult_div
  125        | add_sub '+' mult_div
  126        | add_sub '-' mult_div

  127 mult_div: primitive
  128         | mult_div '*' primitive
  129         | mult_div '/' primitive
  130         | mult_div '%' primitive

  131 primitive: operand
  132          | '+' operand
  133          | '-' operand
  134          | '(' expression ')'

  135 operand: unsigned_constant
  136        | variable
  137        | function_call

  138 variable: var_ident qualifying

  139 qualifying: epsilon
  140           | qualifying '.' var_ident
  141           | qualifying '[' expression expression_st ']'

  142 function_call: func_ident '(' ')'
  143              | func_ident '(' expression expression_st ')'


Terminals, with rules where they appear

$end (0) 0
'%' (37) 130
'(' (40) 59 60 61 62 63 64 71 72 73 74 75 76 97 98 100 107 134 142
    143
')' (41) 59 60 61 62 63 64 71 72 73 74 75 76 97 98 100 107 134 142
    143
'*' (42) 128
'+' (43) 41 42 125 132
',' (44) 12 14 17 35 51 52 68 78 110
'-' (45) 43 44 126 133
'.' (46) 140
'/' (47) 129
':' (58) 103
';' (59) 8 15 16 17 18 59 60 61 62 63 64 92 93 94 95 96
'<' (60) 117
'=' (61) 38 39 112
'>' (62) 118
'[' (91) 36 141
']' (93) 36 141
'{' (123) 8 55 56 81 100 108
'}' (125) 8 55 56 81 100 108
error (256)
ident (258) 8 19 20 33 66 70 80
numb_lit (259) 37 49
char_lit (260) 48
float_lit (261) 50
_struct (262) 8 20 70
_char (263) 21
_int (264) 22 24
_long (265) 23 24
_float (266) 25
_break (267) 94
_return (268) 95 96
_if (269) 97 98
_else (270) 98
_switch (271) 100
_case (272) 104 105
_default (273) 106
_while (274) 107
_void (275) 65
_gl (276) 114
_ngl (277) 115
_klgl (278) 119
_grgl (279) 120
_shl (280) 122
_shr (281) 123


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
epsilon (46)
    on left: 1, on right: 9 77 82 101 109 139
program (47)
    on left: 2, on right: 0
decl_st (48)
    on left: 3 4, on right: 2 4
decl (49)
    on left: 5 6 7, on right: 3 4
struct_decl (50)
    on left: 8, on right: 5
var_decl_st (51)
    on left: 9 10, on right: 8 10 81 108
var_part_st (52)
    on left: 11 12, on right: 15
var_part_all_st (53)
    on left: 13 14, on right: 12 14 17 18
var_decl (54)
    on left: 15 16 17 18, on right: 6 10
def_part (55)
    on left: 19, on right: 16 17 63 64 75 76
struct_part (56)
    on left: 20, on right: 18 61 62 73 74
base_type (57)
    on left: 21 22 23 24 25, on right: 15 19 69
var_part (58)
    on left: 26 27 28, on right: 11 12
var_part_all (59)
    on left: 29 30 31 32, on right: 13 14
var_ident (60)
    on left: 33, on right: 26 27 28 29 30 31 32 138 140
dim_st (61)
    on left: 34 35, on right: 35 36
array_part (62)
    on left: 36, on right: 26 28 30 32
dim (63)
    on left: 37, on right: 34 35
init_part (64)
    on left: 38 39, on right: 27 28 31 32
constant (65)
    on left: 40 41 42 43 44, on right: 38 51 55
unsigned_constant (66)
    on left: 45 46 47, on right: 40 135
char_constant (67)
    on left: 48, on right: 45 104
int_constant (68)
    on left: 49, on right: 41 43 46 105
float_constant (69)
    on left: 50, on right: 42 44 47
complex_constant_opt (70)
    on left: 51 52, on right: 53 54
complex_constant_st (71)
    on left: 53 54, on right: 54 55 56
complex_constant (72)
    on left: 55 56, on right: 39 52
func_decl (73)
    on left: 57 58, on right: 7
prototype (74)
    on left: 59 60 61 62 63 64, on right: 57
ret_type (75)
    on left: 65, on right: 59 60 71 72
func_ident (76)
    on left: 66, on right: 59 60 61 62 71 72 73 74 142 143
par_type_st (77)
    on left: 67 68, on right: 60 62 64 68
par_type (78)
    on left: 69 70, on right: 67 68 79
implementation (79)
    on left: 71 72 73 74 75 76, on right: 58
par_decl_st (80)
    on left: 77 78, on right: 72 74 76 78
par_decl (81)
    on left: 79, on right: 72 74 76 78
par_ident (82)
    on left: 80, on right: 79
block (83)
    on left: 81, on right: 71 72 73 74 75 76
stm_st (84)
    on left: 82 83, on right: 81 83 103 108
stm (85)
    on left: 84 85 86 87 88 89 90 91, on right: 83 97 98 103 107
empty (86)
    on left: 92, on right: 84
expr (87)
    on left: 93, on right: 85
break (88)
    on left: 94, on right: 86
return (89)
    on left: 95 96, on right: 87
if (90)
    on left: 97 98, on right: 88
cond (91)
    on left: 99, on right: 97 98 100 107
switch (92)
    on left: 100, on right: 89
case_st (93)
    on left: 101 102, on right: 100 102
case (94)
    on left: 103, on right: 100 102
case_label (95)
    on left: 104 105 106, on right: 103
while (96)
    on left: 107, on right: 90
compound (97)
    on left: 108, on right: 91
expression_st (98)
    on left: 109 110, on right: 110 141 143
expression (99)
    on left: 111 112, on right: 93 96 99 110 112 134 141 143
equality (100)
    on left: 113 114 115, on right: 111 114 115
relation (101)
    on left: 116 117 118 119 120, on right: 113 114 115 117 118 119
    120
shift (102)
    on left: 121 122 123, on right: 116 117 118 119 120 122 123
add_sub (103)
    on left: 124 125 126, on right: 121 122 123 125 126
mult_div (104)
    on left: 127 128 129 130, on right: 124 125 126 128 129 130
primitive (105)
    on left: 131 132 133 134, on right: 127 128 129 130
operand (106)
    on left: 135 136 137, on right: 131 132 133
variable (107)
    on left: 138, on right: 112 136
qualifying (108)
    on left: 139 140 141, on right: 138 140 141
function_call (109)
    on left: 142 143, on right: 137


state 0

    0 $accept: . program $end

    _struct  shift, and go to state 1
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5
    _void    shift, and go to state 6

    program         go to state 7
    decl_st         go to state 8
    decl            go to state 9
    struct_decl     go to state 10
    var_decl        go to state 11
    def_part        go to state 12
    struct_part     go to state 13
    base_type       go to state 14
    func_decl       go to state 15
    prototype       go to state 16
    ret_type        go to state 17
    implementation  go to state 18


state 1

    8 struct_decl: _struct . ident '{' var_decl_st '}' ';'
   20 struct_part: _struct . ident

    ident  shift, and go to state 19


state 2

   21 base_type: _char .

    $default  reduce using rule 21 (base_type)


state 3

   22 base_type: _int .

    $default  reduce using rule 22 (base_type)


state 4

   23 base_type: _long .
   24          | _long . _int

    _int  shift, and go to state 20

    $default  reduce using rule 23 (base_type)


state 5

   25 base_type: _float .

    $default  reduce using rule 25 (base_type)


state 6

   65 ret_type: _void .

    $default  reduce using rule 65 (ret_type)


state 7

    0 $accept: program . $end

    $end  shift, and go to state 21


state 8

    2 program: decl_st .

    $default  reduce using rule 2 (program)


state 9

    3 decl_st: decl .
    4        | decl . decl_st

    _struct  shift, and go to state 1
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5
    _void    shift, and go to state 6

    $default  reduce using rule 3 (decl_st)

    decl_st         go to state 22
    decl            go to state 9
    struct_decl     go to state 10
    var_decl        go to state 11
    def_part        go to state 12
    struct_part     go to state 13
    base_type       go to state 14
    func_decl       go to state 15
    prototype       go to state 16
    ret_type        go to state 17
    implementation  go to state 18


state 10

    5 decl: struct_decl .

    $default  reduce using rule 5 (decl)


state 11

    6 decl: var_decl .

    $default  reduce using rule 6 (decl)


state 12

   16 var_decl: def_part . ';'
   17         | def_part . ',' var_part_all_st ';'
   63 prototype: def_part . '(' ')' ';'
   64          | def_part . '(' par_type_st ')' ';'
   75 implementation: def_part . '(' ')' block
   76               | def_part . '(' par_decl par_decl_st ')' block

    ';'  shift, and go to state 23
    ','  shift, and go to state 24
    '('  shift, and go to state 25


state 13

   18 var_decl: struct_part . var_part_all_st ';'
   61 prototype: struct_part . func_ident '(' ')' ';'
   62          | struct_part . func_ident '(' par_type_st ')' ';'
   73 implementation: struct_part . func_ident '(' ')' block
   74               | struct_part . func_ident '(' par_decl par_decl_st ')' block

    ident  shift, and go to state 26

    var_part_all_st  go to state 27
    var_part_all     go to state 28
    var_ident        go to state 29
    func_ident       go to state 30


state 14

   15 var_decl: base_type . var_part_st ';'
   19 def_part: base_type . ident

    ident  shift, and go to state 31

    var_part_st  go to state 32
    var_part     go to state 33
    var_ident    go to state 34


state 15

    7 decl: func_decl .

    $default  reduce using rule 7 (decl)


state 16

   57 func_decl: prototype .

    $default  reduce using rule 57 (func_decl)


state 17

   59 prototype: ret_type . func_ident '(' ')' ';'
   60          | ret_type . func_ident '(' par_type_st ')' ';'
   71 implementation: ret_type . func_ident '(' ')' block
   72               | ret_type . func_ident '(' par_decl par_decl_st ')' block

    ident  shift, and go to state 35

    func_ident  go to state 36


state 18

   58 func_decl: implementation .

    $default  reduce using rule 58 (func_decl)


state 19

    8 struct_decl: _struct ident . '{' var_decl_st '}' ';'
   20 struct_part: _struct ident .

    '{'  shift, and go to state 37

    $default  reduce using rule 20 (struct_part)


state 20

   24 base_type: _long _int .

    $default  reduce using rule 24 (base_type)


state 21

    0 $accept: program $end .

    $default  accept


state 22

    4 decl_st: decl decl_st .

    $default  reduce using rule 4 (decl_st)


state 23

   16 var_decl: def_part ';' .

    $default  reduce using rule 16 (var_decl)


state 24

   17 var_decl: def_part ',' . var_part_all_st ';'

    ident  shift, and go to state 38

    var_part_all_st  go to state 39
    var_part_all     go to state 28
    var_ident        go to state 29


state 25

   63 prototype: def_part '(' . ')' ';'
   64          | def_part '(' . par_type_st ')' ';'
   75 implementation: def_part '(' . ')' block
   76               | def_part '(' . par_decl par_decl_st ')' block

    _struct  shift, and go to state 40
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5
    ')'      shift, and go to state 41

    base_type    go to state 42
    par_type_st  go to state 43
    par_type     go to state 44
    par_decl     go to state 45


state 26

   33 var_ident: ident .
   66 func_ident: ident .

    '('       reduce using rule 66 (func_ident)
    $default  reduce using rule 33 (var_ident)


state 27

   18 var_decl: struct_part var_part_all_st . ';'

    ';'  shift, and go to state 46


state 28

   13 var_part_all_st: var_part_all .
   14                | var_part_all . ',' var_part_all_st

    ','  shift, and go to state 47

    $default  reduce using rule 13 (var_part_all_st)


state 29

   29 var_part_all: var_ident .
   30             | var_ident . array_part
   31             | var_ident . init_part
   32             | var_ident . array_part init_part

    '['  shift, and go to state 48
    '='  shift, and go to state 49

    $default  reduce using rule 29 (var_part_all)

    array_part  go to state 50
    init_part   go to state 51


state 30

   61 prototype: struct_part func_ident . '(' ')' ';'
   62          | struct_part func_ident . '(' par_type_st ')' ';'
   73 implementation: struct_part func_ident . '(' ')' block
   74               | struct_part func_ident . '(' par_decl par_decl_st ')' block

    '('  shift, and go to state 52


state 31

   19 def_part: base_type ident .
   33 var_ident: ident .

    '['       reduce using rule 33 (var_ident)
    '='       reduce using rule 33 (var_ident)
    $default  reduce using rule 19 (def_part)


state 32

   15 var_decl: base_type var_part_st . ';'

    ';'  shift, and go to state 53


state 33

   11 var_part_st: var_part .
   12            | var_part . ',' var_part_all_st

    ','  shift, and go to state 54

    $default  reduce using rule 11 (var_part_st)


state 34

   26 var_part: var_ident . array_part
   27         | var_ident . init_part
   28         | var_ident . array_part init_part

    '['  shift, and go to state 48
    '='  shift, and go to state 49

    array_part  go to state 55
    init_part   go to state 56


state 35

   66 func_ident: ident .

    $default  reduce using rule 66 (func_ident)


state 36

   59 prototype: ret_type func_ident . '(' ')' ';'
   60          | ret_type func_ident . '(' par_type_st ')' ';'
   71 implementation: ret_type func_ident . '(' ')' block
   72               | ret_type func_ident . '(' par_decl par_decl_st ')' block

    '('  shift, and go to state 57


state 37

    8 struct_decl: _struct ident '{' . var_decl_st '}' ';'

    _struct  shift, and go to state 58
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 59
    var_decl_st  go to state 60
    var_decl     go to state 61
    def_part     go to state 62
    struct_part  go to state 63
    base_type    go to state 14


state 38

   33 var_ident: ident .

    $default  reduce using rule 33 (var_ident)


state 39

   17 var_decl: def_part ',' var_part_all_st . ';'

    ';'  shift, and go to state 64


state 40

   70 par_type: _struct . ident

    ident  shift, and go to state 65


state 41

   63 prototype: def_part '(' ')' . ';'
   75 implementation: def_part '(' ')' . block

    '{'  shift, and go to state 66
    ';'  shift, and go to state 67

    block  go to state 68


state 42

   69 par_type: base_type .

    $default  reduce using rule 69 (par_type)


state 43

   64 prototype: def_part '(' par_type_st . ')' ';'

    ')'  shift, and go to state 69


state 44

   67 par_type_st: par_type .
   68            | par_type . ',' par_type_st
   79 par_decl: par_type . par_ident

    ident  shift, and go to state 70
    ','    shift, and go to state 71

    $default  reduce using rule 67 (par_type_st)

    par_ident  go to state 72


state 45

   76 implementation: def_part '(' par_decl . par_decl_st ')' block

    ','  shift, and go to state 73

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 74
    par_decl_st  go to state 75


state 46

   18 var_decl: struct_part var_part_all_st ';' .

    $default  reduce using rule 18 (var_decl)


state 47

   14 var_part_all_st: var_part_all ',' . var_part_all_st

    ident  shift, and go to state 38

    var_part_all_st  go to state 76
    var_part_all     go to state 28
    var_ident        go to state 29


state 48

   36 array_part: '[' . dim_st ']'

    numb_lit  shift, and go to state 77

    dim_st  go to state 78
    dim     go to state 79


state 49

   38 init_part: '=' . constant
   39          | '=' . complex_constant

    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '{'        shift, and go to state 85

    constant           go to state 86
    unsigned_constant  go to state 87
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    complex_constant   go to state 91


state 50

   30 var_part_all: var_ident array_part .
   32             | var_ident array_part . init_part

    '='  shift, and go to state 49

    $default  reduce using rule 30 (var_part_all)

    init_part  go to state 92


state 51

   31 var_part_all: var_ident init_part .

    $default  reduce using rule 31 (var_part_all)


state 52

   61 prototype: struct_part func_ident '(' . ')' ';'
   62          | struct_part func_ident '(' . par_type_st ')' ';'
   73 implementation: struct_part func_ident '(' . ')' block
   74               | struct_part func_ident '(' . par_decl par_decl_st ')' block

    _struct  shift, and go to state 40
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5
    ')'      shift, and go to state 93

    base_type    go to state 42
    par_type_st  go to state 94
    par_type     go to state 44
    par_decl     go to state 95


state 53

   15 var_decl: base_type var_part_st ';' .

    $default  reduce using rule 15 (var_decl)


state 54

   12 var_part_st: var_part ',' . var_part_all_st

    ident  shift, and go to state 38

    var_part_all_st  go to state 96
    var_part_all     go to state 28
    var_ident        go to state 29


state 55

   26 var_part: var_ident array_part .
   28         | var_ident array_part . init_part

    '='  shift, and go to state 49

    $default  reduce using rule 26 (var_part)

    init_part  go to state 97


state 56

   27 var_part: var_ident init_part .

    $default  reduce using rule 27 (var_part)


state 57

   59 prototype: ret_type func_ident '(' . ')' ';'
   60          | ret_type func_ident '(' . par_type_st ')' ';'
   71 implementation: ret_type func_ident '(' . ')' block
   72               | ret_type func_ident '(' . par_decl par_decl_st ')' block

    _struct  shift, and go to state 40
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5
    ')'      shift, and go to state 98

    base_type    go to state 42
    par_type_st  go to state 99
    par_type     go to state 44
    par_decl     go to state 100


state 58

   20 struct_part: _struct . ident

    ident  shift, and go to state 101


state 59

    9 var_decl_st: epsilon .

    $default  reduce using rule 9 (var_decl_st)


state 60

    8 struct_decl: _struct ident '{' var_decl_st . '}' ';'

    '}'  shift, and go to state 102


state 61

   10 var_decl_st: var_decl . var_decl_st

    _struct  shift, and go to state 58
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 59
    var_decl_st  go to state 103
    var_decl     go to state 61
    def_part     go to state 62
    struct_part  go to state 63
    base_type    go to state 14


state 62

   16 var_decl: def_part . ';'
   17         | def_part . ',' var_part_all_st ';'

    ';'  shift, and go to state 23
    ','  shift, and go to state 24


state 63

   18 var_decl: struct_part . var_part_all_st ';'

    ident  shift, and go to state 38

    var_part_all_st  go to state 27
    var_part_all     go to state 28
    var_ident        go to state 29


state 64

   17 var_decl: def_part ',' var_part_all_st ';' .

    $default  reduce using rule 17 (var_decl)


state 65

   70 par_type: _struct ident .

    $default  reduce using rule 70 (par_type)


state 66

   81 block: '{' . var_decl_st stm_st '}'

    _struct  shift, and go to state 58
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 59
    var_decl_st  go to state 104
    var_decl     go to state 61
    def_part     go to state 62
    struct_part  go to state 63
    base_type    go to state 14


state 67

   63 prototype: def_part '(' ')' ';' .

    $default  reduce using rule 63 (prototype)


state 68

   75 implementation: def_part '(' ')' block .

    $default  reduce using rule 75 (implementation)


state 69

   64 prototype: def_part '(' par_type_st ')' . ';'

    ';'  shift, and go to state 105


state 70

   80 par_ident: ident .

    $default  reduce using rule 80 (par_ident)


state 71

   68 par_type_st: par_type ',' . par_type_st

    _struct  shift, and go to state 40
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5

    base_type    go to state 42
    par_type_st  go to state 106
    par_type     go to state 107


state 72

   79 par_decl: par_type par_ident .

    $default  reduce using rule 79 (par_decl)


state 73

   78 par_decl_st: ',' . par_decl par_decl_st

    _struct  shift, and go to state 40
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5

    base_type  go to state 42
    par_type   go to state 108
    par_decl   go to state 109


state 74

   77 par_decl_st: epsilon .

    $default  reduce using rule 77 (par_decl_st)


state 75

   76 implementation: def_part '(' par_decl par_decl_st . ')' block

    ')'  shift, and go to state 110


state 76

   14 var_part_all_st: var_part_all ',' var_part_all_st .

    $default  reduce using rule 14 (var_part_all_st)


state 77

   37 dim: numb_lit .

    $default  reduce using rule 37 (dim)


state 78

   36 array_part: '[' dim_st . ']'

    ']'  shift, and go to state 111


state 79

   34 dim_st: dim .
   35       | dim . ',' dim_st

    ','  shift, and go to state 112

    $default  reduce using rule 34 (dim_st)


state 80

   49 int_constant: numb_lit .

    $default  reduce using rule 49 (int_constant)


state 81

   48 char_constant: char_lit .

    $default  reduce using rule 48 (char_constant)


state 82

   50 float_constant: float_lit .

    $default  reduce using rule 50 (float_constant)


state 83

   41 constant: '+' . int_constant
   42         | '+' . float_constant

    numb_lit   shift, and go to state 80
    float_lit  shift, and go to state 82

    int_constant    go to state 113
    float_constant  go to state 114


state 84

   43 constant: '-' . int_constant
   44         | '-' . float_constant

    numb_lit   shift, and go to state 80
    float_lit  shift, and go to state 82

    int_constant    go to state 115
    float_constant  go to state 116


state 85

   55 complex_constant: '{' . constant complex_constant_st '}'
   56                 | '{' . complex_constant_st '}'

    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    ','        shift, and go to state 117

    constant              go to state 118
    unsigned_constant     go to state 87
    char_constant         go to state 88
    int_constant          go to state 89
    float_constant        go to state 90
    complex_constant_opt  go to state 119
    complex_constant_st   go to state 120


state 86

   38 init_part: '=' constant .

    $default  reduce using rule 38 (init_part)


state 87

   40 constant: unsigned_constant .

    $default  reduce using rule 40 (constant)


state 88

   45 unsigned_constant: char_constant .

    $default  reduce using rule 45 (unsigned_constant)


state 89

   46 unsigned_constant: int_constant .

    $default  reduce using rule 46 (unsigned_constant)


state 90

   47 unsigned_constant: float_constant .

    $default  reduce using rule 47 (unsigned_constant)


state 91

   39 init_part: '=' complex_constant .

    $default  reduce using rule 39 (init_part)


state 92

   32 var_part_all: var_ident array_part init_part .

    $default  reduce using rule 32 (var_part_all)


state 93

   61 prototype: struct_part func_ident '(' ')' . ';'
   73 implementation: struct_part func_ident '(' ')' . block

    '{'  shift, and go to state 66
    ';'  shift, and go to state 121

    block  go to state 122


state 94

   62 prototype: struct_part func_ident '(' par_type_st . ')' ';'

    ')'  shift, and go to state 123


state 95

   74 implementation: struct_part func_ident '(' par_decl . par_decl_st ')' block

    ','  shift, and go to state 73

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 74
    par_decl_st  go to state 124


state 96

   12 var_part_st: var_part ',' var_part_all_st .

    $default  reduce using rule 12 (var_part_st)


state 97

   28 var_part: var_ident array_part init_part .

    $default  reduce using rule 28 (var_part)


state 98

   59 prototype: ret_type func_ident '(' ')' . ';'
   71 implementation: ret_type func_ident '(' ')' . block

    '{'  shift, and go to state 66
    ';'  shift, and go to state 125

    block  go to state 126


state 99

   60 prototype: ret_type func_ident '(' par_type_st . ')' ';'

    ')'  shift, and go to state 127


state 100

   72 implementation: ret_type func_ident '(' par_decl . par_decl_st ')' block

    ','  shift, and go to state 73

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 74
    par_decl_st  go to state 128


state 101

   20 struct_part: _struct ident .

    $default  reduce using rule 20 (struct_part)


state 102

    8 struct_decl: _struct ident '{' var_decl_st '}' . ';'

    ';'  shift, and go to state 129


state 103

   10 var_decl_st: var_decl var_decl_st .

    $default  reduce using rule 10 (var_decl_st)


state 104

   81 block: '{' var_decl_st . stm_st '}'

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    _break     shift, and go to state 130
    _return    shift, and go to state 131
    _if        shift, and go to state 132
    _switch    shift, and go to state 133
    _while     shift, and go to state 134
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '{'        shift, and go to state 137
    ';'        shift, and go to state 138
    '('        shift, and go to state 139

    $default  reduce using rule 1 (epsilon)

    epsilon            go to state 140
    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    stm_st             go to state 144
    stm                go to state 145
    empty              go to state 146
    expr               go to state 147
    break              go to state 148
    return             go to state 149
    if                 go to state 150
    switch             go to state 151
    while              go to state 152
    compound           go to state 153
    expression         go to state 154
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 105

   64 prototype: def_part '(' par_type_st ')' ';' .

    $default  reduce using rule 64 (prototype)


state 106

   68 par_type_st: par_type ',' par_type_st .

    $default  reduce using rule 68 (par_type_st)


state 107

   67 par_type_st: par_type .
   68            | par_type . ',' par_type_st

    ','  shift, and go to state 71

    $default  reduce using rule 67 (par_type_st)


state 108

   79 par_decl: par_type . par_ident

    ident  shift, and go to state 70

    par_ident  go to state 72


state 109

   78 par_decl_st: ',' par_decl . par_decl_st

    ','  shift, and go to state 73

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 74
    par_decl_st  go to state 164


state 110

   76 implementation: def_part '(' par_decl par_decl_st ')' . block

    '{'  shift, and go to state 66

    block  go to state 165


state 111

   36 array_part: '[' dim_st ']' .

    $default  reduce using rule 36 (array_part)


state 112

   35 dim_st: dim ',' . dim_st

    numb_lit  shift, and go to state 77

    dim_st  go to state 166
    dim     go to state 79


state 113

   41 constant: '+' int_constant .

    $default  reduce using rule 41 (constant)


state 114

   42 constant: '+' float_constant .

    $default  reduce using rule 42 (constant)


state 115

   43 constant: '-' int_constant .

    $default  reduce using rule 43 (constant)


state 116

   44 constant: '-' float_constant .

    $default  reduce using rule 44 (constant)


state 117

   51 complex_constant_opt: ',' . constant
   52                     | ',' . complex_constant

    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '{'        shift, and go to state 85

    constant           go to state 167
    unsigned_constant  go to state 87
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    complex_constant   go to state 168


state 118

   55 complex_constant: '{' constant . complex_constant_st '}'

    ','  shift, and go to state 117

    complex_constant_opt  go to state 119
    complex_constant_st   go to state 169


state 119

   53 complex_constant_st: complex_constant_opt .
   54                    | complex_constant_opt . complex_constant_st

    ','  shift, and go to state 117

    $default  reduce using rule 53 (complex_constant_st)

    complex_constant_opt  go to state 119
    complex_constant_st   go to state 170


state 120

   56 complex_constant: '{' complex_constant_st . '}'

    '}'  shift, and go to state 171


state 121

   61 prototype: struct_part func_ident '(' ')' ';' .

    $default  reduce using rule 61 (prototype)


state 122

   73 implementation: struct_part func_ident '(' ')' block .

    $default  reduce using rule 73 (implementation)


state 123

   62 prototype: struct_part func_ident '(' par_type_st ')' . ';'

    ';'  shift, and go to state 172


state 124

   74 implementation: struct_part func_ident '(' par_decl par_decl_st . ')' block

    ')'  shift, and go to state 173


state 125

   59 prototype: ret_type func_ident '(' ')' ';' .

    $default  reduce using rule 59 (prototype)


state 126

   71 implementation: ret_type func_ident '(' ')' block .

    $default  reduce using rule 71 (implementation)


state 127

   60 prototype: ret_type func_ident '(' par_type_st ')' . ';'

    ';'  shift, and go to state 174


state 128

   72 implementation: ret_type func_ident '(' par_decl par_decl_st . ')' block

    ')'  shift, and go to state 175


state 129

    8 struct_decl: _struct ident '{' var_decl_st '}' ';' .

    $default  reduce using rule 8 (struct_decl)


state 130

   94 break: _break . ';'

    ';'  shift, and go to state 176


state 131

   95 return: _return . ';'
   96       | _return . expression ';'

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    ';'        shift, and go to state 177
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    expression         go to state 178
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 132

   97 if: _if . '(' cond ')' stm
   98   | _if . '(' cond ')' stm _else stm

    '('  shift, and go to state 179


state 133

  100 switch: _switch . '(' cond ')' '{' case case_st '}'

    '('  shift, and go to state 180


state 134

  107 while: _while . '(' cond ')' stm

    '('  shift, and go to state 181


state 135

  132 primitive: '+' . operand

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    operand            go to state 182
    variable           go to state 183
    function_call      go to state 163


state 136

  133 primitive: '-' . operand

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    operand            go to state 184
    variable           go to state 183
    function_call      go to state 163


state 137

  108 compound: '{' . var_decl_st stm_st '}'

    _struct  shift, and go to state 58
    _char    shift, and go to state 2
    _int     shift, and go to state 3
    _long    shift, and go to state 4
    _float   shift, and go to state 5

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 59
    var_decl_st  go to state 185
    var_decl     go to state 61
    def_part     go to state 62
    struct_part  go to state 63
    base_type    go to state 14


state 138

   92 empty: ';' .

    $default  reduce using rule 92 (empty)


state 139

  134 primitive: '(' . expression ')'

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    expression         go to state 186
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 140

   82 stm_st: epsilon .

    $default  reduce using rule 82 (stm_st)


state 141

  138 variable: var_ident . qualifying

    $default  reduce using rule 1 (epsilon)

    epsilon     go to state 187
    qualifying  go to state 188


state 142

  135 operand: unsigned_constant .

    $default  reduce using rule 135 (operand)


state 143

  142 function_call: func_ident . '(' ')'
  143              | func_ident . '(' expression expression_st ')'

    '('  shift, and go to state 189


state 144

   81 block: '{' var_decl_st stm_st . '}'

    '}'  shift, and go to state 190


state 145

   83 stm_st: stm . stm_st

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    _break     shift, and go to state 130
    _return    shift, and go to state 131
    _if        shift, and go to state 132
    _switch    shift, and go to state 133
    _while     shift, and go to state 134
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '{'        shift, and go to state 137
    ';'        shift, and go to state 138
    '('        shift, and go to state 139

    $default  reduce using rule 1 (epsilon)

    epsilon            go to state 140
    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    stm_st             go to state 191
    stm                go to state 145
    empty              go to state 146
    expr               go to state 147
    break              go to state 148
    return             go to state 149
    if                 go to state 150
    switch             go to state 151
    while              go to state 152
    compound           go to state 153
    expression         go to state 154
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 146

   84 stm: empty .

    $default  reduce using rule 84 (stm)


state 147

   85 stm: expr .

    $default  reduce using rule 85 (stm)


state 148

   86 stm: break .

    $default  reduce using rule 86 (stm)


state 149

   87 stm: return .

    $default  reduce using rule 87 (stm)


state 150

   88 stm: if .

    $default  reduce using rule 88 (stm)


state 151

   89 stm: switch .

    $default  reduce using rule 89 (stm)


state 152

   90 stm: while .

    $default  reduce using rule 90 (stm)


state 153

   91 stm: compound .

    $default  reduce using rule 91 (stm)


state 154

   93 expr: expression . ';'

    ';'  shift, and go to state 192


state 155

  111 expression: equality .
  114 equality: equality . _gl relation
  115         | equality . _ngl relation

    _gl   shift, and go to state 193
    _ngl  shift, and go to state 194

    $default  reduce using rule 111 (expression)


state 156

  113 equality: relation .
  117 relation: relation . '<' shift
  118         | relation . '>' shift
  119         | relation . _klgl shift
  120         | relation . _grgl shift

    _klgl  shift, and go to state 195
    _grgl  shift, and go to state 196
    '<'    shift, and go to state 197
    '>'    shift, and go to state 198

    $default  reduce using rule 113 (equality)


state 157

  116 relation: shift .
  122 shift: shift . _shl add_sub
  123      | shift . _shr add_sub

    _shl  shift, and go to state 199
    _shr  shift, and go to state 200

    $default  reduce using rule 116 (relation)


state 158

  121 shift: add_sub .
  125 add_sub: add_sub . '+' mult_div
  126        | add_sub . '-' mult_div

    '+'  shift, and go to state 201
    '-'  shift, and go to state 202

    $default  reduce using rule 121 (shift)


state 159

  124 add_sub: mult_div .
  128 mult_div: mult_div . '*' primitive
  129         | mult_div . '/' primitive
  130         | mult_div . '%' primitive

    '*'  shift, and go to state 203
    '/'  shift, and go to state 204
    '%'  shift, and go to state 205

    $default  reduce using rule 124 (add_sub)


state 160

  127 mult_div: primitive .

    $default  reduce using rule 127 (mult_div)


state 161

  131 primitive: operand .

    $default  reduce using rule 131 (primitive)


state 162

  112 expression: variable . '=' expression
  136 operand: variable .

    '='  shift, and go to state 206

    $default  reduce using rule 136 (operand)


state 163

  137 operand: function_call .

    $default  reduce using rule 137 (operand)


state 164

   78 par_decl_st: ',' par_decl par_decl_st .

    $default  reduce using rule 78 (par_decl_st)


state 165

   76 implementation: def_part '(' par_decl par_decl_st ')' block .

    $default  reduce using rule 76 (implementation)


state 166

   35 dim_st: dim ',' dim_st .

    $default  reduce using rule 35 (dim_st)


state 167

   51 complex_constant_opt: ',' constant .

    $default  reduce using rule 51 (complex_constant_opt)


state 168

   52 complex_constant_opt: ',' complex_constant .

    $default  reduce using rule 52 (complex_constant_opt)


state 169

   55 complex_constant: '{' constant complex_constant_st . '}'

    '}'  shift, and go to state 207


state 170

   54 complex_constant_st: complex_constant_opt complex_constant_st .

    $default  reduce using rule 54 (complex_constant_st)


state 171

   56 complex_constant: '{' complex_constant_st '}' .

    $default  reduce using rule 56 (complex_constant)


state 172

   62 prototype: struct_part func_ident '(' par_type_st ')' ';' .

    $default  reduce using rule 62 (prototype)


state 173

   74 implementation: struct_part func_ident '(' par_decl par_decl_st ')' . block

    '{'  shift, and go to state 66

    block  go to state 208


state 174

   60 prototype: ret_type func_ident '(' par_type_st ')' ';' .

    $default  reduce using rule 60 (prototype)


state 175

   72 implementation: ret_type func_ident '(' par_decl par_decl_st ')' . block

    '{'  shift, and go to state 66

    block  go to state 209


state 176

   94 break: _break ';' .

    $default  reduce using rule 94 (break)


state 177

   95 return: _return ';' .

    $default  reduce using rule 95 (return)


state 178

   96 return: _return expression . ';'

    ';'  shift, and go to state 210


state 179

   97 if: _if '(' . cond ')' stm
   98   | _if '(' . cond ')' stm _else stm

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    cond               go to state 211
    expression         go to state 212
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 180

  100 switch: _switch '(' . cond ')' '{' case case_st '}'

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    cond               go to state 213
    expression         go to state 212
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 181

  107 while: _while '(' . cond ')' stm

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    cond               go to state 214
    expression         go to state 212
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 182

  132 primitive: '+' operand .

    $default  reduce using rule 132 (primitive)


state 183

  136 operand: variable .

    $default  reduce using rule 136 (operand)


state 184

  133 primitive: '-' operand .

    $default  reduce using rule 133 (primitive)


state 185

  108 compound: '{' var_decl_st . stm_st '}'

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    _break     shift, and go to state 130
    _return    shift, and go to state 131
    _if        shift, and go to state 132
    _switch    shift, and go to state 133
    _while     shift, and go to state 134
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '{'        shift, and go to state 137
    ';'        shift, and go to state 138
    '('        shift, and go to state 139

    $default  reduce using rule 1 (epsilon)

    epsilon            go to state 140
    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    stm_st             go to state 215
    stm                go to state 145
    empty              go to state 146
    expr               go to state 147
    break              go to state 148
    return             go to state 149
    if                 go to state 150
    switch             go to state 151
    while              go to state 152
    compound           go to state 153
    expression         go to state 154
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 186

  134 primitive: '(' expression . ')'

    ')'  shift, and go to state 216


state 187

  139 qualifying: epsilon .

    $default  reduce using rule 139 (qualifying)


state 188

  138 variable: var_ident qualifying .
  140 qualifying: qualifying . '.' var_ident
  141           | qualifying . '[' expression expression_st ']'

    '['  shift, and go to state 217
    '.'  shift, and go to state 218

    $default  reduce using rule 138 (variable)


state 189

  142 function_call: func_ident '(' . ')'
  143              | func_ident '(' . expression expression_st ')'

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139
    ')'        shift, and go to state 219

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    expression         go to state 220
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 190

   81 block: '{' var_decl_st stm_st '}' .

    $default  reduce using rule 81 (block)


state 191

   83 stm_st: stm stm_st .

    $default  reduce using rule 83 (stm_st)


state 192

   93 expr: expression ';' .

    $default  reduce using rule 93 (expr)


state 193

  114 equality: equality _gl . relation

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    relation           go to state 221
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 194

  115 equality: equality _ngl . relation

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    relation           go to state 222
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 195

  119 relation: relation _klgl . shift

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    shift              go to state 223
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 196

  120 relation: relation _grgl . shift

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    shift              go to state 224
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 197

  117 relation: relation '<' . shift

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    shift              go to state 225
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 198

  118 relation: relation '>' . shift

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    shift              go to state 226
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 199

  122 shift: shift _shl . add_sub

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    add_sub            go to state 227
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 200

  123 shift: shift _shr . add_sub

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    add_sub            go to state 228
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 201

  125 add_sub: add_sub '+' . mult_div

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    mult_div           go to state 229
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 202

  126 add_sub: add_sub '-' . mult_div

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    mult_div           go to state 230
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 203

  128 mult_div: mult_div '*' . primitive

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    primitive          go to state 231
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 204

  129 mult_div: mult_div '/' . primitive

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    primitive          go to state 232
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 205

  130 mult_div: mult_div '%' . primitive

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    primitive          go to state 233
    operand            go to state 161
    variable           go to state 183
    function_call      go to state 163


state 206

  112 expression: variable '=' . expression

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    expression         go to state 234
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 207

   55 complex_constant: '{' constant complex_constant_st '}' .

    $default  reduce using rule 55 (complex_constant)


state 208

   74 implementation: struct_part func_ident '(' par_decl par_decl_st ')' block .

    $default  reduce using rule 74 (implementation)


state 209

   72 implementation: ret_type func_ident '(' par_decl par_decl_st ')' block .

    $default  reduce using rule 72 (implementation)


state 210

   96 return: _return expression ';' .

    $default  reduce using rule 96 (return)


state 211

   97 if: _if '(' cond . ')' stm
   98   | _if '(' cond . ')' stm _else stm

    ')'  shift, and go to state 235


state 212

   99 cond: expression .

    $default  reduce using rule 99 (cond)


state 213

  100 switch: _switch '(' cond . ')' '{' case case_st '}'

    ')'  shift, and go to state 236


state 214

  107 while: _while '(' cond . ')' stm

    ')'  shift, and go to state 237


state 215

  108 compound: '{' var_decl_st stm_st . '}'

    '}'  shift, and go to state 238


state 216

  134 primitive: '(' expression ')' .

    $default  reduce using rule 134 (primitive)


state 217

  141 qualifying: qualifying '[' . expression expression_st ']'

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    expression         go to state 239
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 218

  140 qualifying: qualifying '.' . var_ident

    ident  shift, and go to state 38

    var_ident  go to state 240


state 219

  142 function_call: func_ident '(' ')' .

    $default  reduce using rule 142 (function_call)


state 220

  143 function_call: func_ident '(' expression . expression_st ')'

    ','  shift, and go to state 241

    $default  reduce using rule 1 (epsilon)

    epsilon        go to state 242
    expression_st  go to state 243


state 221

  114 equality: equality _gl relation .
  117 relation: relation . '<' shift
  118         | relation . '>' shift
  119         | relation . _klgl shift
  120         | relation . _grgl shift

    _klgl  shift, and go to state 195
    _grgl  shift, and go to state 196
    '<'    shift, and go to state 197
    '>'    shift, and go to state 198

    $default  reduce using rule 114 (equality)


state 222

  115 equality: equality _ngl relation .
  117 relation: relation . '<' shift
  118         | relation . '>' shift
  119         | relation . _klgl shift
  120         | relation . _grgl shift

    _klgl  shift, and go to state 195
    _grgl  shift, and go to state 196
    '<'    shift, and go to state 197
    '>'    shift, and go to state 198

    $default  reduce using rule 115 (equality)


state 223

  119 relation: relation _klgl shift .
  122 shift: shift . _shl add_sub
  123      | shift . _shr add_sub

    _shl  shift, and go to state 199
    _shr  shift, and go to state 200

    $default  reduce using rule 119 (relation)


state 224

  120 relation: relation _grgl shift .
  122 shift: shift . _shl add_sub
  123      | shift . _shr add_sub

    _shl  shift, and go to state 199
    _shr  shift, and go to state 200

    $default  reduce using rule 120 (relation)


state 225

  117 relation: relation '<' shift .
  122 shift: shift . _shl add_sub
  123      | shift . _shr add_sub

    _shl  shift, and go to state 199
    _shr  shift, and go to state 200

    $default  reduce using rule 117 (relation)


state 226

  118 relation: relation '>' shift .
  122 shift: shift . _shl add_sub
  123      | shift . _shr add_sub

    _shl  shift, and go to state 199
    _shr  shift, and go to state 200

    $default  reduce using rule 118 (relation)


state 227

  122 shift: shift _shl add_sub .
  125 add_sub: add_sub . '+' mult_div
  126        | add_sub . '-' mult_div

    '+'  shift, and go to state 201
    '-'  shift, and go to state 202

    $default  reduce using rule 122 (shift)


state 228

  123 shift: shift _shr add_sub .
  125 add_sub: add_sub . '+' mult_div
  126        | add_sub . '-' mult_div

    '+'  shift, and go to state 201
    '-'  shift, and go to state 202

    $default  reduce using rule 123 (shift)


state 229

  125 add_sub: add_sub '+' mult_div .
  128 mult_div: mult_div . '*' primitive
  129         | mult_div . '/' primitive
  130         | mult_div . '%' primitive

    '*'  shift, and go to state 203
    '/'  shift, and go to state 204
    '%'  shift, and go to state 205

    $default  reduce using rule 125 (add_sub)


state 230

  126 add_sub: add_sub '-' mult_div .
  128 mult_div: mult_div . '*' primitive
  129         | mult_div . '/' primitive
  130         | mult_div . '%' primitive

    '*'  shift, and go to state 203
    '/'  shift, and go to state 204
    '%'  shift, and go to state 205

    $default  reduce using rule 126 (add_sub)


state 231

  128 mult_div: mult_div '*' primitive .

    $default  reduce using rule 128 (mult_div)


state 232

  129 mult_div: mult_div '/' primitive .

    $default  reduce using rule 129 (mult_div)


state 233

  130 mult_div: mult_div '%' primitive .

    $default  reduce using rule 130 (mult_div)


state 234

  112 expression: variable '=' expression .

    $default  reduce using rule 112 (expression)


state 235

   97 if: _if '(' cond ')' . stm
   98   | _if '(' cond ')' . stm _else stm

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    _break     shift, and go to state 130
    _return    shift, and go to state 131
    _if        shift, and go to state 132
    _switch    shift, and go to state 133
    _while     shift, and go to state 134
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '{'        shift, and go to state 137
    ';'        shift, and go to state 138
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    stm                go to state 244
    empty              go to state 146
    expr               go to state 147
    break              go to state 148
    return             go to state 149
    if                 go to state 150
    switch             go to state 151
    while              go to state 152
    compound           go to state 153
    expression         go to state 154
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 236

  100 switch: _switch '(' cond ')' . '{' case case_st '}'

    '{'  shift, and go to state 245


state 237

  107 while: _while '(' cond ')' . stm

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    _break     shift, and go to state 130
    _return    shift, and go to state 131
    _if        shift, and go to state 132
    _switch    shift, and go to state 133
    _while     shift, and go to state 134
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '{'        shift, and go to state 137
    ';'        shift, and go to state 138
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    stm                go to state 246
    empty              go to state 146
    expr               go to state 147
    break              go to state 148
    return             go to state 149
    if                 go to state 150
    switch             go to state 151
    while              go to state 152
    compound           go to state 153
    expression         go to state 154
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 238

  108 compound: '{' var_decl_st stm_st '}' .

    $default  reduce using rule 108 (compound)


state 239

  141 qualifying: qualifying '[' expression . expression_st ']'

    ','  shift, and go to state 241

    $default  reduce using rule 1 (epsilon)

    epsilon        go to state 242
    expression_st  go to state 247


state 240

  140 qualifying: qualifying '.' var_ident .

    $default  reduce using rule 140 (qualifying)


state 241

  110 expression_st: ',' . expression expression_st

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    expression         go to state 248
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 242

  109 expression_st: epsilon .

    $default  reduce using rule 109 (expression_st)


state 243

  143 function_call: func_ident '(' expression expression_st . ')'

    ')'  shift, and go to state 249


state 244

   97 if: _if '(' cond ')' stm .
   98   | _if '(' cond ')' stm . _else stm

    _else  shift, and go to state 250

    $default  reduce using rule 97 (if)


state 245

  100 switch: _switch '(' cond ')' '{' . case case_st '}'

    _case     shift, and go to state 251
    _default  shift, and go to state 252

    case        go to state 253
    case_label  go to state 254


state 246

  107 while: _while '(' cond ')' stm .

    $default  reduce using rule 107 (while)


state 247

  141 qualifying: qualifying '[' expression expression_st . ']'

    ']'  shift, and go to state 255


state 248

  110 expression_st: ',' expression . expression_st

    ','  shift, and go to state 241

    $default  reduce using rule 1 (epsilon)

    epsilon        go to state 242
    expression_st  go to state 256


state 249

  143 function_call: func_ident '(' expression expression_st ')' .

    $default  reduce using rule 143 (function_call)


state 250

   98 if: _if '(' cond ')' stm _else . stm

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    _break     shift, and go to state 130
    _return    shift, and go to state 131
    _if        shift, and go to state 132
    _switch    shift, and go to state 133
    _while     shift, and go to state 134
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '{'        shift, and go to state 137
    ';'        shift, and go to state 138
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    stm                go to state 257
    empty              go to state 146
    expr               go to state 147
    break              go to state 148
    return             go to state 149
    if                 go to state 150
    switch             go to state 151
    while              go to state 152
    compound           go to state 153
    expression         go to state 154
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 251

  104 case_label: _case . char_constant
  105           | _case . int_constant

    numb_lit  shift, and go to state 80
    char_lit  shift, and go to state 81

    char_constant  go to state 258
    int_constant   go to state 259


state 252

  106 case_label: _default .

    $default  reduce using rule 106 (case_label)


state 253

  100 switch: _switch '(' cond ')' '{' case . case_st '}'

    _case     shift, and go to state 251
    _default  shift, and go to state 252

    $default  reduce using rule 1 (epsilon)

    epsilon     go to state 260
    case_st     go to state 261
    case        go to state 262
    case_label  go to state 254


state 254

  103 case: case_label . ':' stm stm_st

    ':'  shift, and go to state 263


state 255

  141 qualifying: qualifying '[' expression expression_st ']' .

    $default  reduce using rule 141 (qualifying)


state 256

  110 expression_st: ',' expression expression_st .

    $default  reduce using rule 110 (expression_st)


state 257

   98 if: _if '(' cond ')' stm _else stm .

    $default  reduce using rule 98 (if)


state 258

  104 case_label: _case char_constant .

    $default  reduce using rule 104 (case_label)


state 259

  105 case_label: _case int_constant .

    $default  reduce using rule 105 (case_label)


state 260

  101 case_st: epsilon .

    $default  reduce using rule 101 (case_st)


state 261

  100 switch: _switch '(' cond ')' '{' case case_st . '}'

    '}'  shift, and go to state 264


state 262

  102 case_st: case . case_st

    _case     shift, and go to state 251
    _default  shift, and go to state 252

    $default  reduce using rule 1 (epsilon)

    epsilon     go to state 260
    case_st     go to state 265
    case        go to state 262
    case_label  go to state 254


state 263

  103 case: case_label ':' . stm stm_st

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    _break     shift, and go to state 130
    _return    shift, and go to state 131
    _if        shift, and go to state 132
    _switch    shift, and go to state 133
    _while     shift, and go to state 134
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '{'        shift, and go to state 137
    ';'        shift, and go to state 138
    '('        shift, and go to state 139

    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    stm                go to state 266
    empty              go to state 146
    expr               go to state 147
    break              go to state 148
    return             go to state 149
    if                 go to state 150
    switch             go to state 151
    while              go to state 152
    compound           go to state 153
    expression         go to state 154
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 264

  100 switch: _switch '(' cond ')' '{' case case_st '}' .

    $default  reduce using rule 100 (switch)


state 265

  102 case_st: case case_st .

    $default  reduce using rule 102 (case_st)


state 266

  103 case: case_label ':' stm . stm_st

    ident      shift, and go to state 26
    numb_lit   shift, and go to state 80
    char_lit   shift, and go to state 81
    float_lit  shift, and go to state 82
    _break     shift, and go to state 130
    _return    shift, and go to state 131
    _if        shift, and go to state 132
    _switch    shift, and go to state 133
    _while     shift, and go to state 134
    '+'        shift, and go to state 135
    '-'        shift, and go to state 136
    '{'        shift, and go to state 137
    ';'        shift, and go to state 138
    '('        shift, and go to state 139

    $default  reduce using rule 1 (epsilon)

    epsilon            go to state 140
    var_ident          go to state 141
    unsigned_constant  go to state 142
    char_constant      go to state 88
    int_constant       go to state 89
    float_constant     go to state 90
    func_ident         go to state 143
    stm_st             go to state 267
    stm                go to state 145
    empty              go to state 146
    expr               go to state 147
    break              go to state 148
    return             go to state 149
    if                 go to state 150
    switch             go to state 151
    while              go to state 152
    compound           go to state 153
    expression         go to state 154
    equality           go to state 155
    relation           go to state 156
    shift              go to state 157
    add_sub            go to state 158
    mult_div           go to state 159
    primitive          go to state 160
    operand            go to state 161
    variable           go to state 162
    function_call      go to state 163


state 267

  103 case: case_label ':' stm stm_st .

    $default  reduce using rule 103 (case)
