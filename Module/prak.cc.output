Conflict in state 242 between rule 97 and token _else resolved as shift.

Grammar
rule 1    epsilon ->		/* empty */
rule 2    program -> decl_st
rule 3    decl_st -> decl
rule 4    decl_st -> decl decl_st
rule 5    decl -> struct_decl
rule 6    decl -> var_decl
rule 7    decl -> func_decl
rule 8    struct_decl -> _struct ident '{' var_decl_st '}' ';'
rule 9    var_decl_st -> epsilon
rule 10   var_decl_st -> var_decl var_decl_st
rule 11   var_part_st -> var_part
rule 12   var_part_st -> var_part ',' var_part_all_st
rule 13   var_part_all_st -> var_part_all
rule 14   var_part_all_st -> var_part_all ',' var_part_all_st
rule 15   var_decl -> base_type var_part_st ';'
rule 16   var_decl -> def_part ';'
rule 17   var_decl -> def_part ',' var_part_all_st ';'
rule 18   var_decl -> struct_part var_part_all_st ';'
rule 19   def_part -> base_type ident
rule 20   struct_part -> _struct ident
rule 21   base_type -> _char
rule 22   base_type -> _int
rule 23   base_type -> _long
rule 24   base_type -> _long _int
rule 25   base_type -> _float
rule 26   var_part -> var_ident array_part
rule 27   var_part -> var_ident init_part
rule 28   var_part -> var_ident array_part init_part
rule 29   var_part_all -> var_ident
rule 30   var_part_all -> var_ident array_part
rule 31   var_part_all -> var_ident init_part
rule 32   var_part_all -> var_ident array_part init_part
rule 33   var_ident -> ident
rule 34   dim_st -> dim
rule 35   dim_st -> dim ',' dim_st
rule 36   array_part -> '[' dim_st ']'
rule 37   dim -> numb_lit
rule 38   init_part -> '=' constant
rule 39   init_part -> '=' complex_constant
rule 40   constant -> unsigned_constant
rule 41   constant -> '+' int_constant
rule 42   constant -> '+' float_constant
rule 43   constant -> '-' int_constant
rule 44   constant -> '-' float_constant
rule 45   unsigned_constant -> char_constant
rule 46   unsigned_constant -> int_constant
rule 47   unsigned_constant -> float_constant
rule 48   char_constant -> char_lit
rule 49   int_constant -> numb_lit
rule 50   float_constant -> float_lit
rule 51   complex_constant_opt -> ',' constant
rule 52   complex_constant_opt -> ',' complex_constant
rule 53   complex_constant_st -> complex_constant_opt
rule 54   complex_constant_st -> complex_constant_opt complex_constant_st
rule 55   complex_constant -> '{' constant complex_constant_st '}'
rule 56   complex_constant -> '{' complex_constant_st '}'
rule 57   func_decl -> prototype
rule 58   func_decl -> implementation
rule 59   prototype -> ret_type func_ident '(' ')' ';'
rule 60   prototype -> ret_type func_ident '(' par_type_st ')' ';'
rule 61   prototype -> struct_part func_ident '(' ')' ';'
rule 62   prototype -> struct_part func_ident '(' par_type_st ')' ';'
rule 63   prototype -> def_part '(' ')' ';'
rule 64   prototype -> def_part '(' par_type_st ')' ';'
rule 65   ret_type -> _void
rule 66   func_ident -> ident
rule 67   par_type_st -> par_type
rule 68   par_type_st -> par_type ',' par_type_st
rule 69   par_type -> base_type
rule 70   par_type -> _struct ident
rule 71   implementation -> ret_type func_ident '(' ')' block
rule 72   implementation -> ret_type func_ident '(' par_decl par_decl_st ')' block
rule 73   implementation -> struct_part func_ident '(' ')' block
rule 74   implementation -> struct_part func_ident '(' par_decl par_decl_st ')' block
rule 75   implementation -> def_part '(' ')' block
rule 76   implementation -> def_part '(' par_decl par_decl_st ')' block
rule 77   par_decl_st -> epsilon
rule 78   par_decl_st -> ',' par_decl par_decl_st
rule 79   par_decl -> par_type par_ident
rule 80   par_ident -> ident
rule 81   block -> '{' var_decl_st stm_st '}'
rule 82   stm_st -> epsilon
rule 83   stm_st -> stm stm_st
rule 84   stm -> empty
rule 85   stm -> expr
rule 86   stm -> break
rule 87   stm -> return
rule 88   stm -> if
rule 89   stm -> switch
rule 90   stm -> while
rule 91   stm -> compound
rule 92   empty -> ';'
rule 93   expr -> expression ';'
rule 94   break -> _break ';'
rule 95   return -> _return ';'
rule 96   return -> _return expression ';'
rule 97   if -> _if '(' cond ')' stm
rule 98   if -> _if '(' cond ')' stm _else stm
rule 99   cond -> expression
rule 100  switch -> _switch '(' cond ')' '{' case case_st '}'
rule 101  case_st -> epsilon
rule 102  case_st -> case case_st
rule 103  case -> case_label ':' stm stm_st
rule 104  case_label -> _case char_constant
rule 105  case_label -> _case int_constant
rule 106  case_label -> _default
rule 107  while -> _while '(' cond ')' stm
rule 108  compound -> '{' var_decl_st stm_st '}'
rule 109  expression_st -> epsilon
rule 110  expression_st -> ',' expression expression_st
rule 111  expression -> equality
rule 112  expression -> variable '=' expression
rule 113  equality -> relation
rule 114  equality -> equality _gl relation
rule 115  equality -> equality _ngl relation
rule 116  relation -> shift
rule 117  relation -> relation '<' shift
rule 118  relation -> relation '>' shift
rule 119  relation -> relation _klgl shift
rule 120  relation -> relation _grgl shift
rule 121  shift -> add_sub
rule 122  shift -> shift _shl add_sub
rule 123  shift -> shift _shr add_sub
rule 124  add_sub -> mult_div
rule 125  add_sub -> add_sub '+' mult_div
rule 126  add_sub -> add_sub '-' mult_div
rule 127  mult_div -> primitive
rule 128  mult_div -> mult_div '*' primitive
rule 129  mult_div -> mult_div '/' primitive
rule 130  mult_div -> mult_div '%' primitive
rule 131  primitive -> operand
rule 132  primitive -> '+' operand
rule 133  primitive -> '-' operand
rule 134  primitive -> '(' expression ')'
rule 135  operand -> unsigned_constant
rule 136  operand -> variable
rule 137  operand -> function_call
rule 138  variable -> var_ident qualifying
rule 139  qualifying -> epsilon
rule 140  qualifying -> qualifying '.' var_ident
rule 141  qualifying -> qualifying '[' expression expression_st ']'
rule 142  function_call -> func_ident '(' ')'
rule 143  function_call -> func_ident '(' expression expression_st ')'

Terminals, with rules where they appear

$ (-1)
'%' (37) 130
'(' (40) 59 60 61 62 63 64 71 72 73 74 75 76 97 98 100 107 134 142
    143
')' (41) 59 60 61 62 63 64 71 72 73 74 75 76 97 98 100 107 134 142
    143
'*' (42) 128
'+' (43) 41 42 125 132
',' (44) 12 14 17 35 51 52 68 78 110
'-' (45) 43 44 126 133
'.' (46) 140
'/' (47) 129
':' (58) 103
';' (59) 8 15 16 17 18 59 60 61 62 63 64 92 93 94 95 96
'<' (60) 117
'=' (61) 38 39 112
'>' (62) 118
'[' (91) 36 141
']' (93) 36 141
'{' (123) 8 55 56 81 100 108
'}' (125) 8 55 56 81 100 108
error (256)
ident (257) 8 19 20 33 66 70 80
numb_lit (258) 37 49
char_lit (259) 48
float_lit (260) 50
_struct (261) 8 20 70
_char (262) 21
_int (263) 22 24
_long (264) 23 24
_float (265) 25
_break (266) 94
_return (267) 95 96
_if (268) 97 98
_else (269) 98
_switch (270) 100
_case (271) 104 105
_default (272) 106
_while (273) 107
_void (274) 65
_gl (275) 114
_ngl (276) 115
_klgl (277) 119
_grgl (278) 120
_shl (279) 122
_shr (280) 123

Nonterminals, with rules where they appear

epsilon (45)
    on left: 1, on right: 9 77 82 101 109 139
program (46)
    on left: 2
decl_st (47)
    on left: 3 4, on right: 2 4
decl (48)
    on left: 5 6 7, on right: 3 4
struct_decl (49)
    on left: 8, on right: 5
var_decl_st (50)
    on left: 9 10, on right: 8 10 81 108
var_part_st (51)
    on left: 11 12, on right: 15
var_part_all_st (52)
    on left: 13 14, on right: 12 14 17 18
var_decl (53)
    on left: 15 16 17 18, on right: 6 10
def_part (54)
    on left: 19, on right: 16 17 63 64 75 76
struct_part (55)
    on left: 20, on right: 18 61 62 73 74
base_type (56)
    on left: 21 22 23 24 25, on right: 15 19 69
var_part (57)
    on left: 26 27 28, on right: 11 12
var_part_all (58)
    on left: 29 30 31 32, on right: 13 14
var_ident (59)
    on left: 33, on right: 26 27 28 29 30 31 32 138 140
dim_st (60)
    on left: 34 35, on right: 35 36
array_part (61)
    on left: 36, on right: 26 28 30 32
dim (62)
    on left: 37, on right: 34 35
init_part (63)
    on left: 38 39, on right: 27 28 31 32
constant (64)
    on left: 40 41 42 43 44, on right: 38 51 55
unsigned_constant (65)
    on left: 45 46 47, on right: 40 135
char_constant (66)
    on left: 48, on right: 45 104
int_constant (67)
    on left: 49, on right: 41 43 46 105
float_constant (68)
    on left: 50, on right: 42 44 47
complex_constant_opt (69)
    on left: 51 52, on right: 53 54
complex_constant_st (70)
    on left: 53 54, on right: 54 55 56
complex_constant (71)
    on left: 55 56, on right: 39 52
func_decl (72)
    on left: 57 58, on right: 7
prototype (73)
    on left: 59 60 61 62 63 64, on right: 57
ret_type (74)
    on left: 65, on right: 59 60 71 72
func_ident (75)
    on left: 66, on right: 59 60 61 62 71 72 73 74 142 143
par_type_st (76)
    on left: 67 68, on right: 60 62 64 68
par_type (77)
    on left: 69 70, on right: 67 68 79
implementation (78)
    on left: 71 72 73 74 75 76, on right: 58
par_decl_st (79)
    on left: 77 78, on right: 72 74 76 78
par_decl (80)
    on left: 79, on right: 72 74 76 78
par_ident (81)
    on left: 80, on right: 79
block (82)
    on left: 81, on right: 71 72 73 74 75 76
stm_st (83)
    on left: 82 83, on right: 81 83 103 108
stm (84)
    on left: 84 85 86 87 88 89 90 91, on right: 83 97 98 103 107
empty (85)
    on left: 92, on right: 84
expr (86)
    on left: 93, on right: 85
break (87)
    on left: 94, on right: 86
return (88)
    on left: 95 96, on right: 87
if (89)
    on left: 97 98, on right: 88
cond (90)
    on left: 99, on right: 97 98 100 107
switch (91)
    on left: 100, on right: 89
case_st (92)
    on left: 101 102, on right: 100 102
case (93)
    on left: 103, on right: 100 102
case_label (94)
    on left: 104 105 106, on right: 103
while (95)
    on left: 107, on right: 90
compound (96)
    on left: 108, on right: 91
expression_st (97)
    on left: 109 110, on right: 110 141 143
expression (98)
    on left: 111 112, on right: 93 96 99 110 112 134 141 143
equality (99)
    on left: 113 114 115, on right: 111 114 115
relation (100)
    on left: 116 117 118 119 120, on right: 113 114 115 117 118 119
    120
shift (101)
    on left: 121 122 123, on right: 116 117 118 119 120 122 123
add_sub (102)
    on left: 124 125 126, on right: 121 122 123 125 126
mult_div (103)
    on left: 127 128 129 130, on right: 124 125 126 128 129 130
primitive (104)
    on left: 131 132 133 134, on right: 127 128 129 130
operand (105)
    on left: 135 136 137, on right: 131 132 133
variable (106)
    on left: 138, on right: 112 136
qualifying (107)
    on left: 139 140 141, on right: 138 140 141
function_call (108)
    on left: 142 143, on right: 137


state 0

    _struct	shift, and go to state 1
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5
    _void	shift, and go to state 6

    program	go to state 266
    decl_st	go to state 7
    decl	go to state 8
    struct_decl	go to state 9
    var_decl	go to state 10
    def_part	go to state 11
    struct_part	go to state 12
    base_type	go to state 13
    func_decl	go to state 14
    prototype	go to state 15
    ret_type	go to state 16
    implementation	go to state 17



state 1

    struct_decl  ->  _struct . ident '{' var_decl_st '}' ';'   (rule 8)
    struct_part  ->  _struct . ident   (rule 20)

    ident	shift, and go to state 18



state 2

    base_type  ->  _char .   (rule 21)

    $default	reduce using rule 21 (base_type)



state 3

    base_type  ->  _int .   (rule 22)

    $default	reduce using rule 22 (base_type)



state 4

    base_type  ->  _long .   (rule 23)
    base_type  ->  _long . _int   (rule 24)

    _int	shift, and go to state 19

    $default	reduce using rule 23 (base_type)



state 5

    base_type  ->  _float .   (rule 25)

    $default	reduce using rule 25 (base_type)



state 6

    ret_type  ->  _void .   (rule 65)

    $default	reduce using rule 65 (ret_type)



state 7

    program  ->  decl_st .   (rule 2)

    $default	reduce using rule 2 (program)



state 8

    decl_st  ->  decl .   (rule 3)
    decl_st  ->  decl . decl_st   (rule 4)

    _struct	shift, and go to state 1
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5
    _void	shift, and go to state 6

    $default	reduce using rule 3 (decl_st)

    decl_st	go to state 20
    decl	go to state 8
    struct_decl	go to state 9
    var_decl	go to state 10
    def_part	go to state 11
    struct_part	go to state 12
    base_type	go to state 13
    func_decl	go to state 14
    prototype	go to state 15
    ret_type	go to state 16
    implementation	go to state 17



state 9

    decl  ->  struct_decl .   (rule 5)

    $default	reduce using rule 5 (decl)



state 10

    decl  ->  var_decl .   (rule 6)

    $default	reduce using rule 6 (decl)



state 11

    var_decl  ->  def_part . ';'   (rule 16)
    var_decl  ->  def_part . ',' var_part_all_st ';'   (rule 17)
    prototype  ->  def_part . '(' ')' ';'   (rule 63)
    prototype  ->  def_part . '(' par_type_st ')' ';'   (rule 64)
    implementation  ->  def_part . '(' ')' block   (rule 75)
    implementation  ->  def_part . '(' par_decl par_decl_st ')' block   (rule 76)

    ';' 	shift, and go to state 21
    ',' 	shift, and go to state 22
    '(' 	shift, and go to state 23



state 12

    var_decl  ->  struct_part . var_part_all_st ';'   (rule 18)
    prototype  ->  struct_part . func_ident '(' ')' ';'   (rule 61)
    prototype  ->  struct_part . func_ident '(' par_type_st ')' ';'   (rule 62)
    implementation  ->  struct_part . func_ident '(' ')' block   (rule 73)
    implementation  ->  struct_part . func_ident '(' par_decl par_decl_st ')' block   (rule 74)

    ident	shift, and go to state 24

    var_part_all_st	go to state 25
    var_part_all	go to state 26
    var_ident	go to state 27
    func_ident	go to state 28



state 13

    var_decl  ->  base_type . var_part_st ';'   (rule 15)
    def_part  ->  base_type . ident   (rule 19)

    ident	shift, and go to state 29

    var_part_st	go to state 30
    var_part	go to state 31
    var_ident	go to state 32



state 14

    decl  ->  func_decl .   (rule 7)

    $default	reduce using rule 7 (decl)



state 15

    func_decl  ->  prototype .   (rule 57)

    $default	reduce using rule 57 (func_decl)



state 16

    prototype  ->  ret_type . func_ident '(' ')' ';'   (rule 59)
    prototype  ->  ret_type . func_ident '(' par_type_st ')' ';'   (rule 60)
    implementation  ->  ret_type . func_ident '(' ')' block   (rule 71)
    implementation  ->  ret_type . func_ident '(' par_decl par_decl_st ')' block   (rule 72)

    ident	shift, and go to state 33

    func_ident	go to state 34



state 17

    func_decl  ->  implementation .   (rule 58)

    $default	reduce using rule 58 (func_decl)



state 18

    struct_decl  ->  _struct ident . '{' var_decl_st '}' ';'   (rule 8)
    struct_part  ->  _struct ident .   (rule 20)

    '{' 	shift, and go to state 35

    $default	reduce using rule 20 (struct_part)



state 19

    base_type  ->  _long _int .   (rule 24)

    $default	reduce using rule 24 (base_type)



state 20

    decl_st  ->  decl decl_st .   (rule 4)

    $default	reduce using rule 4 (decl_st)



state 21

    var_decl  ->  def_part ';' .   (rule 16)

    $default	reduce using rule 16 (var_decl)



state 22

    var_decl  ->  def_part ',' . var_part_all_st ';'   (rule 17)

    ident	shift, and go to state 36

    var_part_all_st	go to state 37
    var_part_all	go to state 26
    var_ident	go to state 27



state 23

    prototype  ->  def_part '(' . ')' ';'   (rule 63)
    prototype  ->  def_part '(' . par_type_st ')' ';'   (rule 64)
    implementation  ->  def_part '(' . ')' block   (rule 75)
    implementation  ->  def_part '(' . par_decl par_decl_st ')' block   (rule 76)

    _struct	shift, and go to state 38
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5
    ')' 	shift, and go to state 39

    base_type	go to state 40
    par_type_st	go to state 41
    par_type	go to state 42
    par_decl	go to state 43



state 24

    var_ident  ->  ident .   (rule 33)
    func_ident  ->  ident .   (rule 66)

    '(' 	reduce using rule 66 (func_ident)
    $default	reduce using rule 33 (var_ident)



state 25

    var_decl  ->  struct_part var_part_all_st . ';'   (rule 18)

    ';' 	shift, and go to state 44



state 26

    var_part_all_st  ->  var_part_all .   (rule 13)
    var_part_all_st  ->  var_part_all . ',' var_part_all_st   (rule 14)

    ',' 	shift, and go to state 45

    $default	reduce using rule 13 (var_part_all_st)



state 27

    var_part_all  ->  var_ident .   (rule 29)
    var_part_all  ->  var_ident . array_part   (rule 30)
    var_part_all  ->  var_ident . init_part   (rule 31)
    var_part_all  ->  var_ident . array_part init_part   (rule 32)

    '[' 	shift, and go to state 46
    '=' 	shift, and go to state 47

    $default	reduce using rule 29 (var_part_all)

    array_part	go to state 48
    init_part	go to state 49



state 28

    prototype  ->  struct_part func_ident . '(' ')' ';'   (rule 61)
    prototype  ->  struct_part func_ident . '(' par_type_st ')' ';'   (rule 62)
    implementation  ->  struct_part func_ident . '(' ')' block   (rule 73)
    implementation  ->  struct_part func_ident . '(' par_decl par_decl_st ')' block   (rule 74)

    '(' 	shift, and go to state 50



state 29

    def_part  ->  base_type ident .   (rule 19)
    var_ident  ->  ident .   (rule 33)

    '[' 	reduce using rule 33 (var_ident)
    '=' 	reduce using rule 33 (var_ident)
    $default	reduce using rule 19 (def_part)



state 30

    var_decl  ->  base_type var_part_st . ';'   (rule 15)

    ';' 	shift, and go to state 51



state 31

    var_part_st  ->  var_part .   (rule 11)
    var_part_st  ->  var_part . ',' var_part_all_st   (rule 12)

    ',' 	shift, and go to state 52

    $default	reduce using rule 11 (var_part_st)



state 32

    var_part  ->  var_ident . array_part   (rule 26)
    var_part  ->  var_ident . init_part   (rule 27)
    var_part  ->  var_ident . array_part init_part   (rule 28)

    '[' 	shift, and go to state 46
    '=' 	shift, and go to state 47

    array_part	go to state 53
    init_part	go to state 54



state 33

    func_ident  ->  ident .   (rule 66)

    $default	reduce using rule 66 (func_ident)



state 34

    prototype  ->  ret_type func_ident . '(' ')' ';'   (rule 59)
    prototype  ->  ret_type func_ident . '(' par_type_st ')' ';'   (rule 60)
    implementation  ->  ret_type func_ident . '(' ')' block   (rule 71)
    implementation  ->  ret_type func_ident . '(' par_decl par_decl_st ')' block   (rule 72)

    '(' 	shift, and go to state 55



state 35

    struct_decl  ->  _struct ident '{' . var_decl_st '}' ';'   (rule 8)

    _struct	shift, and go to state 56
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 57
    var_decl_st	go to state 58
    var_decl	go to state 59
    def_part	go to state 60
    struct_part	go to state 61
    base_type	go to state 13



state 36

    var_ident  ->  ident .   (rule 33)

    $default	reduce using rule 33 (var_ident)



state 37

    var_decl  ->  def_part ',' var_part_all_st . ';'   (rule 17)

    ';' 	shift, and go to state 62



state 38

    par_type  ->  _struct . ident   (rule 70)

    ident	shift, and go to state 63



state 39

    prototype  ->  def_part '(' ')' . ';'   (rule 63)
    implementation  ->  def_part '(' ')' . block   (rule 75)

    '{' 	shift, and go to state 64
    ';' 	shift, and go to state 65

    block	go to state 66



state 40

    par_type  ->  base_type .   (rule 69)

    $default	reduce using rule 69 (par_type)



state 41

    prototype  ->  def_part '(' par_type_st . ')' ';'   (rule 64)

    ')' 	shift, and go to state 67



state 42

    par_type_st  ->  par_type .   (rule 67)
    par_type_st  ->  par_type . ',' par_type_st   (rule 68)
    par_decl  ->  par_type . par_ident   (rule 79)

    ident	shift, and go to state 68
    ',' 	shift, and go to state 69

    $default	reduce using rule 67 (par_type_st)

    par_ident	go to state 70



state 43

    implementation  ->  def_part '(' par_decl . par_decl_st ')' block   (rule 76)

    ',' 	shift, and go to state 71

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 72
    par_decl_st	go to state 73



state 44

    var_decl  ->  struct_part var_part_all_st ';' .   (rule 18)

    $default	reduce using rule 18 (var_decl)



state 45

    var_part_all_st  ->  var_part_all ',' . var_part_all_st   (rule 14)

    ident	shift, and go to state 36

    var_part_all_st	go to state 74
    var_part_all	go to state 26
    var_ident	go to state 27



state 46

    array_part  ->  '[' . dim_st ']'   (rule 36)

    numb_lit	shift, and go to state 75

    dim_st	go to state 76
    dim 	go to state 77



state 47

    init_part  ->  '=' . constant   (rule 38)
    init_part  ->  '=' . complex_constant   (rule 39)

    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '{' 	shift, and go to state 83

    constant	go to state 84
    unsigned_constant	go to state 85
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    complex_constant	go to state 89



state 48

    var_part_all  ->  var_ident array_part .   (rule 30)
    var_part_all  ->  var_ident array_part . init_part   (rule 32)

    '=' 	shift, and go to state 47

    $default	reduce using rule 30 (var_part_all)

    init_part	go to state 90



state 49

    var_part_all  ->  var_ident init_part .   (rule 31)

    $default	reduce using rule 31 (var_part_all)



state 50

    prototype  ->  struct_part func_ident '(' . ')' ';'   (rule 61)
    prototype  ->  struct_part func_ident '(' . par_type_st ')' ';'   (rule 62)
    implementation  ->  struct_part func_ident '(' . ')' block   (rule 73)
    implementation  ->  struct_part func_ident '(' . par_decl par_decl_st ')' block   (rule 74)

    _struct	shift, and go to state 38
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5
    ')' 	shift, and go to state 91

    base_type	go to state 40
    par_type_st	go to state 92
    par_type	go to state 42
    par_decl	go to state 93



state 51

    var_decl  ->  base_type var_part_st ';' .   (rule 15)

    $default	reduce using rule 15 (var_decl)



state 52

    var_part_st  ->  var_part ',' . var_part_all_st   (rule 12)

    ident	shift, and go to state 36

    var_part_all_st	go to state 94
    var_part_all	go to state 26
    var_ident	go to state 27



state 53

    var_part  ->  var_ident array_part .   (rule 26)
    var_part  ->  var_ident array_part . init_part   (rule 28)

    '=' 	shift, and go to state 47

    $default	reduce using rule 26 (var_part)

    init_part	go to state 95



state 54

    var_part  ->  var_ident init_part .   (rule 27)

    $default	reduce using rule 27 (var_part)



state 55

    prototype  ->  ret_type func_ident '(' . ')' ';'   (rule 59)
    prototype  ->  ret_type func_ident '(' . par_type_st ')' ';'   (rule 60)
    implementation  ->  ret_type func_ident '(' . ')' block   (rule 71)
    implementation  ->  ret_type func_ident '(' . par_decl par_decl_st ')' block   (rule 72)

    _struct	shift, and go to state 38
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5
    ')' 	shift, and go to state 96

    base_type	go to state 40
    par_type_st	go to state 97
    par_type	go to state 42
    par_decl	go to state 98



state 56

    struct_part  ->  _struct . ident   (rule 20)

    ident	shift, and go to state 99



state 57

    var_decl_st  ->  epsilon .   (rule 9)

    $default	reduce using rule 9 (var_decl_st)



state 58

    struct_decl  ->  _struct ident '{' var_decl_st . '}' ';'   (rule 8)

    '}' 	shift, and go to state 100



state 59

    var_decl_st  ->  var_decl . var_decl_st   (rule 10)

    _struct	shift, and go to state 56
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 57
    var_decl_st	go to state 101
    var_decl	go to state 59
    def_part	go to state 60
    struct_part	go to state 61
    base_type	go to state 13



state 60

    var_decl  ->  def_part . ';'   (rule 16)
    var_decl  ->  def_part . ',' var_part_all_st ';'   (rule 17)

    ';' 	shift, and go to state 21
    ',' 	shift, and go to state 22



state 61

    var_decl  ->  struct_part . var_part_all_st ';'   (rule 18)

    ident	shift, and go to state 36

    var_part_all_st	go to state 25
    var_part_all	go to state 26
    var_ident	go to state 27



state 62

    var_decl  ->  def_part ',' var_part_all_st ';' .   (rule 17)

    $default	reduce using rule 17 (var_decl)



state 63

    par_type  ->  _struct ident .   (rule 70)

    $default	reduce using rule 70 (par_type)



state 64

    block  ->  '{' . var_decl_st stm_st '}'   (rule 81)

    _struct	shift, and go to state 56
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 57
    var_decl_st	go to state 102
    var_decl	go to state 59
    def_part	go to state 60
    struct_part	go to state 61
    base_type	go to state 13



state 65

    prototype  ->  def_part '(' ')' ';' .   (rule 63)

    $default	reduce using rule 63 (prototype)



state 66

    implementation  ->  def_part '(' ')' block .   (rule 75)

    $default	reduce using rule 75 (implementation)



state 67

    prototype  ->  def_part '(' par_type_st ')' . ';'   (rule 64)

    ';' 	shift, and go to state 103



state 68

    par_ident  ->  ident .   (rule 80)

    $default	reduce using rule 80 (par_ident)



state 69

    par_type_st  ->  par_type ',' . par_type_st   (rule 68)

    _struct	shift, and go to state 38
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5

    base_type	go to state 40
    par_type_st	go to state 104
    par_type	go to state 105



state 70

    par_decl  ->  par_type par_ident .   (rule 79)

    $default	reduce using rule 79 (par_decl)



state 71

    par_decl_st  ->  ',' . par_decl par_decl_st   (rule 78)

    _struct	shift, and go to state 38
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5

    base_type	go to state 40
    par_type	go to state 106
    par_decl	go to state 107



state 72

    par_decl_st  ->  epsilon .   (rule 77)

    $default	reduce using rule 77 (par_decl_st)



state 73

    implementation  ->  def_part '(' par_decl par_decl_st . ')' block   (rule 76)

    ')' 	shift, and go to state 108



state 74

    var_part_all_st  ->  var_part_all ',' var_part_all_st .   (rule 14)

    $default	reduce using rule 14 (var_part_all_st)



state 75

    dim  ->  numb_lit .   (rule 37)

    $default	reduce using rule 37 (dim)



state 76

    array_part  ->  '[' dim_st . ']'   (rule 36)

    ']' 	shift, and go to state 109



state 77

    dim_st  ->  dim .   (rule 34)
    dim_st  ->  dim . ',' dim_st   (rule 35)

    ',' 	shift, and go to state 110

    $default	reduce using rule 34 (dim_st)



state 78

    int_constant  ->  numb_lit .   (rule 49)

    $default	reduce using rule 49 (int_constant)



state 79

    char_constant  ->  char_lit .   (rule 48)

    $default	reduce using rule 48 (char_constant)



state 80

    float_constant  ->  float_lit .   (rule 50)

    $default	reduce using rule 50 (float_constant)



state 81

    constant  ->  '+' . int_constant   (rule 41)
    constant  ->  '+' . float_constant   (rule 42)

    numb_lit	shift, and go to state 78
    float_lit	shift, and go to state 80

    int_constant	go to state 111
    float_constant	go to state 112



state 82

    constant  ->  '-' . int_constant   (rule 43)
    constant  ->  '-' . float_constant   (rule 44)

    numb_lit	shift, and go to state 78
    float_lit	shift, and go to state 80

    int_constant	go to state 113
    float_constant	go to state 114



state 83

    complex_constant  ->  '{' . constant complex_constant_st '}'   (rule 55)
    complex_constant  ->  '{' . complex_constant_st '}'   (rule 56)

    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    ',' 	shift, and go to state 115

    constant	go to state 116
    unsigned_constant	go to state 85
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    complex_constant_opt	go to state 117
    complex_constant_st	go to state 118



state 84

    init_part  ->  '=' constant .   (rule 38)

    $default	reduce using rule 38 (init_part)



state 85

    constant  ->  unsigned_constant .   (rule 40)

    $default	reduce using rule 40 (constant)



state 86

    unsigned_constant  ->  char_constant .   (rule 45)

    $default	reduce using rule 45 (unsigned_constant)



state 87

    unsigned_constant  ->  int_constant .   (rule 46)

    $default	reduce using rule 46 (unsigned_constant)



state 88

    unsigned_constant  ->  float_constant .   (rule 47)

    $default	reduce using rule 47 (unsigned_constant)



state 89

    init_part  ->  '=' complex_constant .   (rule 39)

    $default	reduce using rule 39 (init_part)



state 90

    var_part_all  ->  var_ident array_part init_part .   (rule 32)

    $default	reduce using rule 32 (var_part_all)



state 91

    prototype  ->  struct_part func_ident '(' ')' . ';'   (rule 61)
    implementation  ->  struct_part func_ident '(' ')' . block   (rule 73)

    '{' 	shift, and go to state 64
    ';' 	shift, and go to state 119

    block	go to state 120



state 92

    prototype  ->  struct_part func_ident '(' par_type_st . ')' ';'   (rule 62)

    ')' 	shift, and go to state 121



state 93

    implementation  ->  struct_part func_ident '(' par_decl . par_decl_st ')' block   (rule 74)

    ',' 	shift, and go to state 71

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 72
    par_decl_st	go to state 122



state 94

    var_part_st  ->  var_part ',' var_part_all_st .   (rule 12)

    $default	reduce using rule 12 (var_part_st)



state 95

    var_part  ->  var_ident array_part init_part .   (rule 28)

    $default	reduce using rule 28 (var_part)



state 96

    prototype  ->  ret_type func_ident '(' ')' . ';'   (rule 59)
    implementation  ->  ret_type func_ident '(' ')' . block   (rule 71)

    '{' 	shift, and go to state 64
    ';' 	shift, and go to state 123

    block	go to state 124



state 97

    prototype  ->  ret_type func_ident '(' par_type_st . ')' ';'   (rule 60)

    ')' 	shift, and go to state 125



state 98

    implementation  ->  ret_type func_ident '(' par_decl . par_decl_st ')' block   (rule 72)

    ',' 	shift, and go to state 71

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 72
    par_decl_st	go to state 126



state 99

    struct_part  ->  _struct ident .   (rule 20)

    $default	reduce using rule 20 (struct_part)



state 100

    struct_decl  ->  _struct ident '{' var_decl_st '}' . ';'   (rule 8)

    ';' 	shift, and go to state 127



state 101

    var_decl_st  ->  var_decl var_decl_st .   (rule 10)

    $default	reduce using rule 10 (var_decl_st)



state 102

    block  ->  '{' var_decl_st . stm_st '}'   (rule 81)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    _break	shift, and go to state 128
    _return	shift, and go to state 129
    _if 	shift, and go to state 130
    _switch	shift, and go to state 131
    _while	shift, and go to state 132
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '{' 	shift, and go to state 135
    ';' 	shift, and go to state 136
    '(' 	shift, and go to state 137

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 138
    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    stm_st	go to state 142
    stm 	go to state 143
    empty	go to state 144
    expr	go to state 145
    break	go to state 146
    return	go to state 147
    if  	go to state 148
    switch	go to state 149
    while	go to state 150
    compound	go to state 151
    expression	go to state 152
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 103

    prototype  ->  def_part '(' par_type_st ')' ';' .   (rule 64)

    $default	reduce using rule 64 (prototype)



state 104

    par_type_st  ->  par_type ',' par_type_st .   (rule 68)

    $default	reduce using rule 68 (par_type_st)



state 105

    par_type_st  ->  par_type .   (rule 67)
    par_type_st  ->  par_type . ',' par_type_st   (rule 68)

    ',' 	shift, and go to state 69

    $default	reduce using rule 67 (par_type_st)



state 106

    par_decl  ->  par_type . par_ident   (rule 79)

    ident	shift, and go to state 68

    par_ident	go to state 70



state 107

    par_decl_st  ->  ',' par_decl . par_decl_st   (rule 78)

    ',' 	shift, and go to state 71

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 72
    par_decl_st	go to state 162



state 108

    implementation  ->  def_part '(' par_decl par_decl_st ')' . block   (rule 76)

    '{' 	shift, and go to state 64

    block	go to state 163



state 109

    array_part  ->  '[' dim_st ']' .   (rule 36)

    $default	reduce using rule 36 (array_part)



state 110

    dim_st  ->  dim ',' . dim_st   (rule 35)

    numb_lit	shift, and go to state 75

    dim_st	go to state 164
    dim 	go to state 77



state 111

    constant  ->  '+' int_constant .   (rule 41)

    $default	reduce using rule 41 (constant)



state 112

    constant  ->  '+' float_constant .   (rule 42)

    $default	reduce using rule 42 (constant)



state 113

    constant  ->  '-' int_constant .   (rule 43)

    $default	reduce using rule 43 (constant)



state 114

    constant  ->  '-' float_constant .   (rule 44)

    $default	reduce using rule 44 (constant)



state 115

    complex_constant_opt  ->  ',' . constant   (rule 51)
    complex_constant_opt  ->  ',' . complex_constant   (rule 52)

    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '{' 	shift, and go to state 83

    constant	go to state 165
    unsigned_constant	go to state 85
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    complex_constant	go to state 166



state 116

    complex_constant  ->  '{' constant . complex_constant_st '}'   (rule 55)

    ',' 	shift, and go to state 115

    complex_constant_opt	go to state 117
    complex_constant_st	go to state 167



state 117

    complex_constant_st  ->  complex_constant_opt .   (rule 53)
    complex_constant_st  ->  complex_constant_opt . complex_constant_st   (rule 54)

    ',' 	shift, and go to state 115

    $default	reduce using rule 53 (complex_constant_st)

    complex_constant_opt	go to state 117
    complex_constant_st	go to state 168



state 118

    complex_constant  ->  '{' complex_constant_st . '}'   (rule 56)

    '}' 	shift, and go to state 169



state 119

    prototype  ->  struct_part func_ident '(' ')' ';' .   (rule 61)

    $default	reduce using rule 61 (prototype)



state 120

    implementation  ->  struct_part func_ident '(' ')' block .   (rule 73)

    $default	reduce using rule 73 (implementation)



state 121

    prototype  ->  struct_part func_ident '(' par_type_st ')' . ';'   (rule 62)

    ';' 	shift, and go to state 170



state 122

    implementation  ->  struct_part func_ident '(' par_decl par_decl_st . ')' block   (rule 74)

    ')' 	shift, and go to state 171



state 123

    prototype  ->  ret_type func_ident '(' ')' ';' .   (rule 59)

    $default	reduce using rule 59 (prototype)



state 124

    implementation  ->  ret_type func_ident '(' ')' block .   (rule 71)

    $default	reduce using rule 71 (implementation)



state 125

    prototype  ->  ret_type func_ident '(' par_type_st ')' . ';'   (rule 60)

    ';' 	shift, and go to state 172



state 126

    implementation  ->  ret_type func_ident '(' par_decl par_decl_st . ')' block   (rule 72)

    ')' 	shift, and go to state 173



state 127

    struct_decl  ->  _struct ident '{' var_decl_st '}' ';' .   (rule 8)

    $default	reduce using rule 8 (struct_decl)



state 128

    break  ->  _break . ';'   (rule 94)

    ';' 	shift, and go to state 174



state 129

    return  ->  _return . ';'   (rule 95)
    return  ->  _return . expression ';'   (rule 96)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    ';' 	shift, and go to state 175
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    expression	go to state 176
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 130

    if  ->  _if . '(' cond ')' stm   (rule 97)
    if  ->  _if . '(' cond ')' stm _else stm   (rule 98)

    '(' 	shift, and go to state 177



state 131

    switch  ->  _switch . '(' cond ')' '{' case case_st '}'   (rule 100)

    '(' 	shift, and go to state 178



state 132

    while  ->  _while . '(' cond ')' stm   (rule 107)

    '(' 	shift, and go to state 179



state 133

    primitive  ->  '+' . operand   (rule 132)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    operand	go to state 180
    variable	go to state 181
    function_call	go to state 161



state 134

    primitive  ->  '-' . operand   (rule 133)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    operand	go to state 182
    variable	go to state 181
    function_call	go to state 161



state 135

    compound  ->  '{' . var_decl_st stm_st '}'   (rule 108)

    _struct	shift, and go to state 56
    _char	shift, and go to state 2
    _int	shift, and go to state 3
    _long	shift, and go to state 4
    _float	shift, and go to state 5

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 57
    var_decl_st	go to state 183
    var_decl	go to state 59
    def_part	go to state 60
    struct_part	go to state 61
    base_type	go to state 13



state 136

    empty  ->  ';' .   (rule 92)

    $default	reduce using rule 92 (empty)



state 137

    primitive  ->  '(' . expression ')'   (rule 134)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    expression	go to state 184
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 138

    stm_st  ->  epsilon .   (rule 82)

    $default	reduce using rule 82 (stm_st)



state 139

    variable  ->  var_ident . qualifying   (rule 138)

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 185
    qualifying	go to state 186



state 140

    operand  ->  unsigned_constant .   (rule 135)

    $default	reduce using rule 135 (operand)



state 141

    function_call  ->  func_ident . '(' ')'   (rule 142)
    function_call  ->  func_ident . '(' expression expression_st ')'   (rule 143)

    '(' 	shift, and go to state 187



state 142

    block  ->  '{' var_decl_st stm_st . '}'   (rule 81)

    '}' 	shift, and go to state 188



state 143

    stm_st  ->  stm . stm_st   (rule 83)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    _break	shift, and go to state 128
    _return	shift, and go to state 129
    _if 	shift, and go to state 130
    _switch	shift, and go to state 131
    _while	shift, and go to state 132
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '{' 	shift, and go to state 135
    ';' 	shift, and go to state 136
    '(' 	shift, and go to state 137

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 138
    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    stm_st	go to state 189
    stm 	go to state 143
    empty	go to state 144
    expr	go to state 145
    break	go to state 146
    return	go to state 147
    if  	go to state 148
    switch	go to state 149
    while	go to state 150
    compound	go to state 151
    expression	go to state 152
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 144

    stm  ->  empty .   (rule 84)

    $default	reduce using rule 84 (stm)



state 145

    stm  ->  expr .   (rule 85)

    $default	reduce using rule 85 (stm)



state 146

    stm  ->  break .   (rule 86)

    $default	reduce using rule 86 (stm)



state 147

    stm  ->  return .   (rule 87)

    $default	reduce using rule 87 (stm)



state 148

    stm  ->  if .   (rule 88)

    $default	reduce using rule 88 (stm)



state 149

    stm  ->  switch .   (rule 89)

    $default	reduce using rule 89 (stm)



state 150

    stm  ->  while .   (rule 90)

    $default	reduce using rule 90 (stm)



state 151

    stm  ->  compound .   (rule 91)

    $default	reduce using rule 91 (stm)



state 152

    expr  ->  expression . ';'   (rule 93)

    ';' 	shift, and go to state 190



state 153

    expression  ->  equality .   (rule 111)
    equality  ->  equality . _gl relation   (rule 114)
    equality  ->  equality . _ngl relation   (rule 115)

    _gl 	shift, and go to state 191
    _ngl	shift, and go to state 192

    $default	reduce using rule 111 (expression)



state 154

    equality  ->  relation .   (rule 113)
    relation  ->  relation . '<' shift   (rule 117)
    relation  ->  relation . '>' shift   (rule 118)
    relation  ->  relation . _klgl shift   (rule 119)
    relation  ->  relation . _grgl shift   (rule 120)

    _klgl	shift, and go to state 193
    _grgl	shift, and go to state 194
    '<' 	shift, and go to state 195
    '>' 	shift, and go to state 196

    $default	reduce using rule 113 (equality)



state 155

    relation  ->  shift .   (rule 116)
    shift  ->  shift . _shl add_sub   (rule 122)
    shift  ->  shift . _shr add_sub   (rule 123)

    _shl	shift, and go to state 197
    _shr	shift, and go to state 198

    $default	reduce using rule 116 (relation)



state 156

    shift  ->  add_sub .   (rule 121)
    add_sub  ->  add_sub . '+' mult_div   (rule 125)
    add_sub  ->  add_sub . '-' mult_div   (rule 126)

    '+' 	shift, and go to state 199
    '-' 	shift, and go to state 200

    $default	reduce using rule 121 (shift)



state 157

    add_sub  ->  mult_div .   (rule 124)
    mult_div  ->  mult_div . '*' primitive   (rule 128)
    mult_div  ->  mult_div . '/' primitive   (rule 129)
    mult_div  ->  mult_div . '%' primitive   (rule 130)

    '*' 	shift, and go to state 201
    '/' 	shift, and go to state 202
    '%' 	shift, and go to state 203

    $default	reduce using rule 124 (add_sub)



state 158

    mult_div  ->  primitive .   (rule 127)

    $default	reduce using rule 127 (mult_div)



state 159

    primitive  ->  operand .   (rule 131)

    $default	reduce using rule 131 (primitive)



state 160

    expression  ->  variable . '=' expression   (rule 112)
    operand  ->  variable .   (rule 136)

    '=' 	shift, and go to state 204

    $default	reduce using rule 136 (operand)



state 161

    operand  ->  function_call .   (rule 137)

    $default	reduce using rule 137 (operand)



state 162

    par_decl_st  ->  ',' par_decl par_decl_st .   (rule 78)

    $default	reduce using rule 78 (par_decl_st)



state 163

    implementation  ->  def_part '(' par_decl par_decl_st ')' block .   (rule 76)

    $default	reduce using rule 76 (implementation)



state 164

    dim_st  ->  dim ',' dim_st .   (rule 35)

    $default	reduce using rule 35 (dim_st)



state 165

    complex_constant_opt  ->  ',' constant .   (rule 51)

    $default	reduce using rule 51 (complex_constant_opt)



state 166

    complex_constant_opt  ->  ',' complex_constant .   (rule 52)

    $default	reduce using rule 52 (complex_constant_opt)



state 167

    complex_constant  ->  '{' constant complex_constant_st . '}'   (rule 55)

    '}' 	shift, and go to state 205



state 168

    complex_constant_st  ->  complex_constant_opt complex_constant_st .   (rule 54)

    $default	reduce using rule 54 (complex_constant_st)



state 169

    complex_constant  ->  '{' complex_constant_st '}' .   (rule 56)

    $default	reduce using rule 56 (complex_constant)



state 170

    prototype  ->  struct_part func_ident '(' par_type_st ')' ';' .   (rule 62)

    $default	reduce using rule 62 (prototype)



state 171

    implementation  ->  struct_part func_ident '(' par_decl par_decl_st ')' . block   (rule 74)

    '{' 	shift, and go to state 64

    block	go to state 206



state 172

    prototype  ->  ret_type func_ident '(' par_type_st ')' ';' .   (rule 60)

    $default	reduce using rule 60 (prototype)



state 173

    implementation  ->  ret_type func_ident '(' par_decl par_decl_st ')' . block   (rule 72)

    '{' 	shift, and go to state 64

    block	go to state 207



state 174

    break  ->  _break ';' .   (rule 94)

    $default	reduce using rule 94 (break)



state 175

    return  ->  _return ';' .   (rule 95)

    $default	reduce using rule 95 (return)



state 176

    return  ->  _return expression . ';'   (rule 96)

    ';' 	shift, and go to state 208



state 177

    if  ->  _if '(' . cond ')' stm   (rule 97)
    if  ->  _if '(' . cond ')' stm _else stm   (rule 98)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    cond	go to state 209
    expression	go to state 210
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 178

    switch  ->  _switch '(' . cond ')' '{' case case_st '}'   (rule 100)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    cond	go to state 211
    expression	go to state 210
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 179

    while  ->  _while '(' . cond ')' stm   (rule 107)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    cond	go to state 212
    expression	go to state 210
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 180

    primitive  ->  '+' operand .   (rule 132)

    $default	reduce using rule 132 (primitive)



state 181

    operand  ->  variable .   (rule 136)

    $default	reduce using rule 136 (operand)



state 182

    primitive  ->  '-' operand .   (rule 133)

    $default	reduce using rule 133 (primitive)



state 183

    compound  ->  '{' var_decl_st . stm_st '}'   (rule 108)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    _break	shift, and go to state 128
    _return	shift, and go to state 129
    _if 	shift, and go to state 130
    _switch	shift, and go to state 131
    _while	shift, and go to state 132
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '{' 	shift, and go to state 135
    ';' 	shift, and go to state 136
    '(' 	shift, and go to state 137

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 138
    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    stm_st	go to state 213
    stm 	go to state 143
    empty	go to state 144
    expr	go to state 145
    break	go to state 146
    return	go to state 147
    if  	go to state 148
    switch	go to state 149
    while	go to state 150
    compound	go to state 151
    expression	go to state 152
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 184

    primitive  ->  '(' expression . ')'   (rule 134)

    ')' 	shift, and go to state 214



state 185

    qualifying  ->  epsilon .   (rule 139)

    $default	reduce using rule 139 (qualifying)



state 186

    variable  ->  var_ident qualifying .   (rule 138)
    qualifying  ->  qualifying . '.' var_ident   (rule 140)
    qualifying  ->  qualifying . '[' expression expression_st ']'   (rule 141)

    '[' 	shift, and go to state 215
    '.' 	shift, and go to state 216

    $default	reduce using rule 138 (variable)



state 187

    function_call  ->  func_ident '(' . ')'   (rule 142)
    function_call  ->  func_ident '(' . expression expression_st ')'   (rule 143)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137
    ')' 	shift, and go to state 217

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    expression	go to state 218
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 188

    block  ->  '{' var_decl_st stm_st '}' .   (rule 81)

    $default	reduce using rule 81 (block)



state 189

    stm_st  ->  stm stm_st .   (rule 83)

    $default	reduce using rule 83 (stm_st)



state 190

    expr  ->  expression ';' .   (rule 93)

    $default	reduce using rule 93 (expr)



state 191

    equality  ->  equality _gl . relation   (rule 114)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    relation	go to state 219
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 192

    equality  ->  equality _ngl . relation   (rule 115)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    relation	go to state 220
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 193

    relation  ->  relation _klgl . shift   (rule 119)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    shift	go to state 221
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 194

    relation  ->  relation _grgl . shift   (rule 120)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    shift	go to state 222
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 195

    relation  ->  relation '<' . shift   (rule 117)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    shift	go to state 223
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 196

    relation  ->  relation '>' . shift   (rule 118)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    shift	go to state 224
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 197

    shift  ->  shift _shl . add_sub   (rule 122)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    add_sub	go to state 225
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 198

    shift  ->  shift _shr . add_sub   (rule 123)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    add_sub	go to state 226
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 199

    add_sub  ->  add_sub '+' . mult_div   (rule 125)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    mult_div	go to state 227
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 200

    add_sub  ->  add_sub '-' . mult_div   (rule 126)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    mult_div	go to state 228
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 201

    mult_div  ->  mult_div '*' . primitive   (rule 128)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    primitive	go to state 229
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 202

    mult_div  ->  mult_div '/' . primitive   (rule 129)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    primitive	go to state 230
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 203

    mult_div  ->  mult_div '%' . primitive   (rule 130)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    primitive	go to state 231
    operand	go to state 159
    variable	go to state 181
    function_call	go to state 161



state 204

    expression  ->  variable '=' . expression   (rule 112)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    expression	go to state 232
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 205

    complex_constant  ->  '{' constant complex_constant_st '}' .   (rule 55)

    $default	reduce using rule 55 (complex_constant)



state 206

    implementation  ->  struct_part func_ident '(' par_decl par_decl_st ')' block .   (rule 74)

    $default	reduce using rule 74 (implementation)



state 207

    implementation  ->  ret_type func_ident '(' par_decl par_decl_st ')' block .   (rule 72)

    $default	reduce using rule 72 (implementation)



state 208

    return  ->  _return expression ';' .   (rule 96)

    $default	reduce using rule 96 (return)



state 209

    if  ->  _if '(' cond . ')' stm   (rule 97)
    if  ->  _if '(' cond . ')' stm _else stm   (rule 98)

    ')' 	shift, and go to state 233



state 210

    cond  ->  expression .   (rule 99)

    $default	reduce using rule 99 (cond)



state 211

    switch  ->  _switch '(' cond . ')' '{' case case_st '}'   (rule 100)

    ')' 	shift, and go to state 234



state 212

    while  ->  _while '(' cond . ')' stm   (rule 107)

    ')' 	shift, and go to state 235



state 213

    compound  ->  '{' var_decl_st stm_st . '}'   (rule 108)

    '}' 	shift, and go to state 236



state 214

    primitive  ->  '(' expression ')' .   (rule 134)

    $default	reduce using rule 134 (primitive)



state 215

    qualifying  ->  qualifying '[' . expression expression_st ']'   (rule 141)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    expression	go to state 237
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 216

    qualifying  ->  qualifying '.' . var_ident   (rule 140)

    ident	shift, and go to state 36

    var_ident	go to state 238



state 217

    function_call  ->  func_ident '(' ')' .   (rule 142)

    $default	reduce using rule 142 (function_call)



state 218

    function_call  ->  func_ident '(' expression . expression_st ')'   (rule 143)

    ',' 	shift, and go to state 239

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 240
    expression_st	go to state 241



state 219

    equality  ->  equality _gl relation .   (rule 114)
    relation  ->  relation . '<' shift   (rule 117)
    relation  ->  relation . '>' shift   (rule 118)
    relation  ->  relation . _klgl shift   (rule 119)
    relation  ->  relation . _grgl shift   (rule 120)

    _klgl	shift, and go to state 193
    _grgl	shift, and go to state 194
    '<' 	shift, and go to state 195
    '>' 	shift, and go to state 196

    $default	reduce using rule 114 (equality)



state 220

    equality  ->  equality _ngl relation .   (rule 115)
    relation  ->  relation . '<' shift   (rule 117)
    relation  ->  relation . '>' shift   (rule 118)
    relation  ->  relation . _klgl shift   (rule 119)
    relation  ->  relation . _grgl shift   (rule 120)

    _klgl	shift, and go to state 193
    _grgl	shift, and go to state 194
    '<' 	shift, and go to state 195
    '>' 	shift, and go to state 196

    $default	reduce using rule 115 (equality)



state 221

    relation  ->  relation _klgl shift .   (rule 119)
    shift  ->  shift . _shl add_sub   (rule 122)
    shift  ->  shift . _shr add_sub   (rule 123)

    _shl	shift, and go to state 197
    _shr	shift, and go to state 198

    $default	reduce using rule 119 (relation)



state 222

    relation  ->  relation _grgl shift .   (rule 120)
    shift  ->  shift . _shl add_sub   (rule 122)
    shift  ->  shift . _shr add_sub   (rule 123)

    _shl	shift, and go to state 197
    _shr	shift, and go to state 198

    $default	reduce using rule 120 (relation)



state 223

    relation  ->  relation '<' shift .   (rule 117)
    shift  ->  shift . _shl add_sub   (rule 122)
    shift  ->  shift . _shr add_sub   (rule 123)

    _shl	shift, and go to state 197
    _shr	shift, and go to state 198

    $default	reduce using rule 117 (relation)



state 224

    relation  ->  relation '>' shift .   (rule 118)
    shift  ->  shift . _shl add_sub   (rule 122)
    shift  ->  shift . _shr add_sub   (rule 123)

    _shl	shift, and go to state 197
    _shr	shift, and go to state 198

    $default	reduce using rule 118 (relation)



state 225

    shift  ->  shift _shl add_sub .   (rule 122)
    add_sub  ->  add_sub . '+' mult_div   (rule 125)
    add_sub  ->  add_sub . '-' mult_div   (rule 126)

    '+' 	shift, and go to state 199
    '-' 	shift, and go to state 200

    $default	reduce using rule 122 (shift)



state 226

    shift  ->  shift _shr add_sub .   (rule 123)
    add_sub  ->  add_sub . '+' mult_div   (rule 125)
    add_sub  ->  add_sub . '-' mult_div   (rule 126)

    '+' 	shift, and go to state 199
    '-' 	shift, and go to state 200

    $default	reduce using rule 123 (shift)



state 227

    add_sub  ->  add_sub '+' mult_div .   (rule 125)
    mult_div  ->  mult_div . '*' primitive   (rule 128)
    mult_div  ->  mult_div . '/' primitive   (rule 129)
    mult_div  ->  mult_div . '%' primitive   (rule 130)

    '*' 	shift, and go to state 201
    '/' 	shift, and go to state 202
    '%' 	shift, and go to state 203

    $default	reduce using rule 125 (add_sub)



state 228

    add_sub  ->  add_sub '-' mult_div .   (rule 126)
    mult_div  ->  mult_div . '*' primitive   (rule 128)
    mult_div  ->  mult_div . '/' primitive   (rule 129)
    mult_div  ->  mult_div . '%' primitive   (rule 130)

    '*' 	shift, and go to state 201
    '/' 	shift, and go to state 202
    '%' 	shift, and go to state 203

    $default	reduce using rule 126 (add_sub)



state 229

    mult_div  ->  mult_div '*' primitive .   (rule 128)

    $default	reduce using rule 128 (mult_div)



state 230

    mult_div  ->  mult_div '/' primitive .   (rule 129)

    $default	reduce using rule 129 (mult_div)



state 231

    mult_div  ->  mult_div '%' primitive .   (rule 130)

    $default	reduce using rule 130 (mult_div)



state 232

    expression  ->  variable '=' expression .   (rule 112)

    $default	reduce using rule 112 (expression)



state 233

    if  ->  _if '(' cond ')' . stm   (rule 97)
    if  ->  _if '(' cond ')' . stm _else stm   (rule 98)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    _break	shift, and go to state 128
    _return	shift, and go to state 129
    _if 	shift, and go to state 130
    _switch	shift, and go to state 131
    _while	shift, and go to state 132
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '{' 	shift, and go to state 135
    ';' 	shift, and go to state 136
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    stm 	go to state 242
    empty	go to state 144
    expr	go to state 145
    break	go to state 146
    return	go to state 147
    if  	go to state 148
    switch	go to state 149
    while	go to state 150
    compound	go to state 151
    expression	go to state 152
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 234

    switch  ->  _switch '(' cond ')' . '{' case case_st '}'   (rule 100)

    '{' 	shift, and go to state 243



state 235

    while  ->  _while '(' cond ')' . stm   (rule 107)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    _break	shift, and go to state 128
    _return	shift, and go to state 129
    _if 	shift, and go to state 130
    _switch	shift, and go to state 131
    _while	shift, and go to state 132
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '{' 	shift, and go to state 135
    ';' 	shift, and go to state 136
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    stm 	go to state 244
    empty	go to state 144
    expr	go to state 145
    break	go to state 146
    return	go to state 147
    if  	go to state 148
    switch	go to state 149
    while	go to state 150
    compound	go to state 151
    expression	go to state 152
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 236

    compound  ->  '{' var_decl_st stm_st '}' .   (rule 108)

    $default	reduce using rule 108 (compound)



state 237

    qualifying  ->  qualifying '[' expression . expression_st ']'   (rule 141)

    ',' 	shift, and go to state 239

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 240
    expression_st	go to state 245



state 238

    qualifying  ->  qualifying '.' var_ident .   (rule 140)

    $default	reduce using rule 140 (qualifying)



state 239

    expression_st  ->  ',' . expression expression_st   (rule 110)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    expression	go to state 246
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 240

    expression_st  ->  epsilon .   (rule 109)

    $default	reduce using rule 109 (expression_st)



state 241

    function_call  ->  func_ident '(' expression expression_st . ')'   (rule 143)

    ')' 	shift, and go to state 247



state 242

    if  ->  _if '(' cond ')' stm .   (rule 97)
    if  ->  _if '(' cond ')' stm . _else stm   (rule 98)

    _else	shift, and go to state 248

    $default	reduce using rule 97 (if)



state 243

    switch  ->  _switch '(' cond ')' '{' . case case_st '}'   (rule 100)

    _case	shift, and go to state 249
    _default	shift, and go to state 250

    case	go to state 251
    case_label	go to state 252



state 244

    while  ->  _while '(' cond ')' stm .   (rule 107)

    $default	reduce using rule 107 (while)



state 245

    qualifying  ->  qualifying '[' expression expression_st . ']'   (rule 141)

    ']' 	shift, and go to state 253



state 246

    expression_st  ->  ',' expression . expression_st   (rule 110)

    ',' 	shift, and go to state 239

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 240
    expression_st	go to state 254



state 247

    function_call  ->  func_ident '(' expression expression_st ')' .   (rule 143)

    $default	reduce using rule 143 (function_call)



state 248

    if  ->  _if '(' cond ')' stm _else . stm   (rule 98)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    _break	shift, and go to state 128
    _return	shift, and go to state 129
    _if 	shift, and go to state 130
    _switch	shift, and go to state 131
    _while	shift, and go to state 132
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '{' 	shift, and go to state 135
    ';' 	shift, and go to state 136
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    stm 	go to state 255
    empty	go to state 144
    expr	go to state 145
    break	go to state 146
    return	go to state 147
    if  	go to state 148
    switch	go to state 149
    while	go to state 150
    compound	go to state 151
    expression	go to state 152
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 249

    case_label  ->  _case . char_constant   (rule 104)
    case_label  ->  _case . int_constant   (rule 105)

    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79

    char_constant	go to state 256
    int_constant	go to state 257



state 250

    case_label  ->  _default .   (rule 106)

    $default	reduce using rule 106 (case_label)



state 251

    switch  ->  _switch '(' cond ')' '{' case . case_st '}'   (rule 100)

    _case	shift, and go to state 249
    _default	shift, and go to state 250

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 258
    case_st	go to state 259
    case	go to state 260
    case_label	go to state 252



state 252

    case  ->  case_label . ':' stm stm_st   (rule 103)

    ':' 	shift, and go to state 261



state 253

    qualifying  ->  qualifying '[' expression expression_st ']' .   (rule 141)

    $default	reduce using rule 141 (qualifying)



state 254

    expression_st  ->  ',' expression expression_st .   (rule 110)

    $default	reduce using rule 110 (expression_st)



state 255

    if  ->  _if '(' cond ')' stm _else stm .   (rule 98)

    $default	reduce using rule 98 (if)



state 256

    case_label  ->  _case char_constant .   (rule 104)

    $default	reduce using rule 104 (case_label)



state 257

    case_label  ->  _case int_constant .   (rule 105)

    $default	reduce using rule 105 (case_label)



state 258

    case_st  ->  epsilon .   (rule 101)

    $default	reduce using rule 101 (case_st)



state 259

    switch  ->  _switch '(' cond ')' '{' case case_st . '}'   (rule 100)

    '}' 	shift, and go to state 262



state 260

    case_st  ->  case . case_st   (rule 102)

    _case	shift, and go to state 249
    _default	shift, and go to state 250

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 258
    case_st	go to state 263
    case	go to state 260
    case_label	go to state 252



state 261

    case  ->  case_label ':' . stm stm_st   (rule 103)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    _break	shift, and go to state 128
    _return	shift, and go to state 129
    _if 	shift, and go to state 130
    _switch	shift, and go to state 131
    _while	shift, and go to state 132
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '{' 	shift, and go to state 135
    ';' 	shift, and go to state 136
    '(' 	shift, and go to state 137

    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    stm 	go to state 264
    empty	go to state 144
    expr	go to state 145
    break	go to state 146
    return	go to state 147
    if  	go to state 148
    switch	go to state 149
    while	go to state 150
    compound	go to state 151
    expression	go to state 152
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 262

    switch  ->  _switch '(' cond ')' '{' case case_st '}' .   (rule 100)

    $default	reduce using rule 100 (switch)



state 263

    case_st  ->  case case_st .   (rule 102)

    $default	reduce using rule 102 (case_st)



state 264

    case  ->  case_label ':' stm . stm_st   (rule 103)

    ident	shift, and go to state 24
    numb_lit	shift, and go to state 78
    char_lit	shift, and go to state 79
    float_lit	shift, and go to state 80
    _break	shift, and go to state 128
    _return	shift, and go to state 129
    _if 	shift, and go to state 130
    _switch	shift, and go to state 131
    _while	shift, and go to state 132
    '+' 	shift, and go to state 133
    '-' 	shift, and go to state 134
    '{' 	shift, and go to state 135
    ';' 	shift, and go to state 136
    '(' 	shift, and go to state 137

    $default	reduce using rule 1 (epsilon)

    epsilon	go to state 138
    var_ident	go to state 139
    unsigned_constant	go to state 140
    char_constant	go to state 86
    int_constant	go to state 87
    float_constant	go to state 88
    func_ident	go to state 141
    stm_st	go to state 265
    stm 	go to state 143
    empty	go to state 144
    expr	go to state 145
    break	go to state 146
    return	go to state 147
    if  	go to state 148
    switch	go to state 149
    while	go to state 150
    compound	go to state 151
    expression	go to state 152
    equality	go to state 153
    relation	go to state 154
    shift	go to state 155
    add_sub	go to state 156
    mult_div	go to state 157
    primitive	go to state 158
    operand	go to state 159
    variable	go to state 160
    function_call	go to state 161



state 265

    case  ->  case_label ':' stm stm_st .   (rule 103)

    $default	reduce using rule 103 (case)



state 266

    $   	go to state 267



state 267

    $   	go to state 268



state 268

    $default	accept
